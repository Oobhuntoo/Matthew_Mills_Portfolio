ERROR(33): 'or' requires operands of type bool but rhs is of type int.
ERROR(34): 'or' requires operands of type bool but rhs is of type int.
WARNING(37): Variable 'z' may be uninitialized when used here.
ERROR(40): '+' requires operands of type int but lhs is of type bool.
ERROR(40): '+' requires operands of type int but rhs is of type bool.
ERROR(40): '=' requires operands of the same type but lhs is type bool and rhs is type int.
ERROR(45): Symbol 'x' is not declared.
WARNING(45): Variable 'z' may be uninitialized when used here.
ERROR(46): Symbol 'x' is not declared.
ERROR(48): '+' requires operands of type int but lhs is of type bool.
ERROR(48): '+' requires operands of type int but rhs is of type bool.
ERROR(48): '=' requires operands of the same type but lhs is type bool and rhs is type int.
ERROR(49): Symbol 'x' is not declared.
ERROR(49): '*' requires operands of type int but lhs is of type bool.
ERROR(49): '*' requires operands of type int but rhs is of type bool.
ERROR(49): '+' requires operands of type int but lhs is of type bool.
ERROR(49): '*' requires operands of type int but lhs is of type bool.
ERROR(49): Symbol 'x' is not declared.
ERROR(49): '+' requires operands of type int but lhs is of type bool.
Var g of type int [mem: Global  size: 1  loc: 0]
Sibling: 0  Func main returns type void [mem: Global  loc: 0]
!   Child: 1  Compound
!   !   Child: 1  Compound
!   !   !   Child: 0  Var x of type int [mem: Local  size: 1  loc: -2]
!   !   !   Sibling: 0  Var y of type int [mem: Local  size: 1  loc: -3]
!   !   !   Child: 1  Assign: =
!   !   !   !   Child: 0  Id: x [mem: Local  size: 1  loc: -2]
!   !   !   !   Child: 1  Const: 11
!   !   !   Sibling: 0  Assign: =
!   !   !   !   Child: 0  Id: y [mem: Local  size: 1  loc: -3]
!   !   !   !   Child: 1  Const: 12
!   !   !   Sibling: 1  Assign: =
!   !   !   !   Child: 0  Id: g [mem: Global  size: 1  loc: 0]
!   !   !   !   Child: 1  Const: 13
!   !   !   Sibling: 2  Assign: =
!   !   !   !   Child: 0  Id: x [mem: Local  size: 1  loc: -2]
!   !   !   !   Child: 1  Op: +
!   !   !   !   !   Child: 0  Op: +
!   !   !   !   !   !   Child: 0  Op: +
!   !   !   !   !   !   !   Child: 0  Const: 3
!   !   !   !   !   !   !   Child: 1  Op: *
!   !   !   !   !   !   !   !   Child: 0  Const: 4
!   !   !   !   !   !   !   !   Child: 1  Id: x [mem: Local  size: 1  loc: -2]
!   !   !   !   !   !   Child: 1  Op: *
!   !   !   !   !   !   !   Child: 0  Id: y [mem: Local  size: 1  loc: -3]
!   !   !   !   !   !   !   Child: 1  Const: 7
!   !   !   !   !   Child: 1  Op: *
!   !   !   !   !   !   Child: 0  Id: x [mem: Local  size: 1  loc: -2]
!   !   !   !   !   !   Child: 1  Op: +
!   !   !   !   !   !   !   Child: 0  Id: y [mem: Local  size: 1  loc: -3]
!   !   !   !   !   !   !   Child: 1  Id: g [mem: Global  size: 1  loc: 0]
!   !   !   Sibling: 3  Assign: =
!   !   !   !   Child: 0  Id: x [mem: Local  size: 1  loc: -2]
!   !   !   !   Child: 1  Op: -
!   !   !   !   !   Child: 0  Op: -
!   !   !   !   !   !   Child: 0  Op: -
!   !   !   !   !   !   !   Child: 0  Const: 3
!   !   !   !   !   !   !   Child: 1  Op: /
!   !   !   !   !   !   !   !   Child: 0  Const: 4
!   !   !   !   !   !   !   !   Child: 1  Id: x [mem: Local  size: 1  loc: -2]
!   !   !   !   !   !   Child: 1  Op: /
!   !   !   !   !   !   !   Child: 0  Id: y [mem: Local  size: 1  loc: -3]
!   !   !   !   !   !   !   Child: 1  Const: 7
!   !   !   !   !   Child: 1  Op: /
!   !   !   !   !   !   Child: 0  Id: x [mem: Local  size: 1  loc: -2]
!   !   !   !   !   !   Child: 1  Op: -
!   !   !   !   !   !   !   Child: 0  Id: y [mem: Local  size: 1  loc: -3]
!   !   !   !   !   !   !   Child: 1  Id: g [mem: Global  size: 1  loc: 0]
!   !   !   Sibling: 4  Assign: =
!   !   !   !   Child: 0  Id: x [mem: Local  size: 1  loc: -2]
!   !   !   !   Child: 1  Op: /
!   !   !   !   !   Child: 0  Op: %
!   !   !   !   !   !   Child: 0  Op: /
!   !   !   !   !   !   !   Child: 0  Op: %
!   !   !   !   !   !   !   !   Child: 0  Const: 3
!   !   !   !   !   !   !   !   Child: 1  Const: 4
!   !   !   !   !   !   !   Child: 1  Id: x [mem: Local  size: 1  loc: -2]
!   !   !   !   !   !   Child: 1  Op: %
!   !   !   !   !   !   !   Child: 0  Op: /
!   !   !   !   !   !   !   !   Child: 0  Id: y [mem: Local  size: 1  loc: -3]
!   !   !   !   !   !   !   !   Child: 1  Const: 7
!   !   !   !   !   !   !   Child: 1  Id: x [mem: Local  size: 1  loc: -2]
!   !   !   !   !   Child: 1  Op: %
!   !   !   !   !   !   Child: 0  Id: y [mem: Local  size: 1  loc: -3]
!   !   !   !   !   !   Child: 1  Id: g [mem: Global  size: 1  loc: 0]
!   !   Sibling: 0  Compound
!   !   !   Child: 0  Var x of type int [mem: Local  size: 1  loc: -2]
!   !   !   Sibling: 0  Var y of type int [mem: Local  size: 1  loc: -3]
!   !   !   Sibling: 1  Var z is array of type int [mem: Local  size: 33  loc: -5]
!   !   !   Child: 1  Assign: =
!   !   !   !   Child: 0  Id: x [mem: Local  size: 1  loc: -2]
!   !   !   !   Child: 1  Const: 22
!   !   !   Sibling: 0  Assign: =
!   !   !   !   Child: 0  Id: y [mem: Local  size: 1  loc: -3]
!   !   !   !   Child: 1  Const: 23
!   !   !   Sibling: 1  Assign: =
!   !   !   !   Child: 0  Op: [
!   !   !   !   !   Child: 0  Id: z [mem: Local  size: 33  loc: -5]
!   !   !   !   !   Child: 1  Const: 1
!   !   !   !   Child: 1  Assign: =
!   !   !   !   !   Child: 0  Op: [
!   !   !   !   !   !   Child: 0  Id: z [mem: Local  size: 33  loc: -5]
!   !   !   !   !   !   Child: 1  Const: 2
!   !   !   !   !   Child: 1  Assign: =
!   !   !   !   !   !   Child: 0  Op: [
!   !   !   !   !   !   !   Child: 0  Id: z [mem: Local  size: 33  loc: -5]
!   !   !   !   !   !   !   Child: 1  Const: 3
!   !   !   !   !   !   Child: 1  Const: 24
!   !   !   Sibling: 2  Assign: =
!   !   !   !   Child: 0  Id: x [mem: Local  size: 1  loc: -2]
!   !   !   !   Child: 1  Op: [
!   !   !   !   !   Child: 0  Id: z [mem: Local  size: 33  loc: -5]
!   !   !   !   !   Child: 1  Const: 1
!   !   !   Sibling: 3  Assign: =
!   !   !   !   Child: 0  Op: [
!   !   !   !   !   Child: 0  Id: z [mem: Local  size: 33  loc: -5]
!   !   !   !   !   Child: 1  Const: 1
!   !   !   !   Child: 1  Id: x [mem: Local  size: 1  loc: -2]
!   !   !   Sibling: 4  Assign: =
!   !   !   !   Child: 0  Op: [
!   !   !   !   !   Child: 0  Id: z [mem: Local  size: 33  loc: -5]
!   !   !   !   !   Child: 1  Const: 1
!   !   !   !   Child: 1  Op: [
!   !   !   !   !   Child: 0  Id: z [mem: Local  size: 33  loc: -5]
!   !   !   !   !   Child: 1  Const: 2
!   !   !   Sibling: 5  Assign: =
!   !   !   !   Child: 0  Op: [
!   !   !   !   !   Child: 0  Id: z [mem: Local  size: 33  loc: -5]
!   !   !   !   !   Child: 1  Const: 1
!   !   !   !   Child: 1  Op: +
!   !   !   !   !   Child: 0  Op: [
!   !   !   !   !   !   Child: 0  Id: z [mem: Local  size: 33  loc: -5]
!   !   !   !   !   !   Child: 1  Const: 2
!   !   !   !   !   Child: 1  Op: [
!   !   !   !   !   !   Child: 0  Id: z [mem: Local  size: 33  loc: -5]
!   !   !   !   !   !   Child: 1  Const: 3
!   !   Sibling: 1  Compound
!   !   !   Child: 0  Var x of type bool [mem: Local  size: 1  loc: -2]
!   !   !   Sibling: 0  Var y of type bool [mem: Local  size: 1  loc: -3]
!   !   !   Sibling: 1  Var z is array of type bool [mem: Local  size: 33  loc: -5]
!   !   !   Child: 1  Assign: =
!   !   !   !   Child: 0  Id: x [mem: Local  size: 1  loc: -2]
!   !   !   !   Child: 1  Assign: =
!   !   !   !   !   Child: 0  Id: y [mem: Local  size: 1  loc: -3]
!   !   !   !   !   Child: 1  Const: true
!   !   !   Sibling: 0  Assign: =
!   !   !   !   Child: 0  Id: x [mem: Local  size: 1  loc: -2]
!   !   !   !   Child: 1  Op: or
!   !   !   !   !   Child: 0  Op: or
!   !   !   !   !   !   Child: 0  Op: or
!   !   !   !   !   !   !   Child: 0  Const: true
!   !   !   !   !   !   !   Child: 1  Op: and
!   !   !   !   !   !   !   !   Child: 0  Const: false
!   !   !   !   !   !   !   !   Child: 1  Id: x [mem: Local  size: 1  loc: -2]
!   !   !   !   !   !   Child: 1  Op: and
!   !   !   !   !   !   !   Child: 0  Id: y [mem: Local  size: 1  loc: -3]
!   !   !   !   !   !   !   Child: 1  Const: true
!   !   !   !   !   Child: 1  Op: and
!   !   !   !   !   !   Child: 0  Id: x [mem: Local  size: 1  loc: -2]
!   !   !   !   !   !   Child: 1  Op: or
!   !   !   !   !   !   !   Child: 0  Id: y [mem: Local  size: 1  loc: -3]
!   !   !   !   !   !   !   Child: 1  Id: g [mem: Global  size: 1  loc: 0]
!   !   !   Sibling: 1  Assign: =
!   !   !   !   Child: 0  Id: x [mem: Local  size: 1  loc: -2]
!   !   !   !   Child: 1  Op: or
!   !   !   !   !   Child: 0  Const: true
!   !   !   !   !   Child: 1  Const: 7
!   !   !   Sibling: 2  Assign: =
!   !   !   !   Child: 0  Id: x [mem: Local  size: 1  loc: -2]
!   !   !   !   Child: 1  Op: or
!   !   !   !   !   Child: 0  Op: not
!   !   !   !   !   !   Child: 0  Const: true
!   !   !   !   !   Child: 1  Op: not
!   !   !   !   !   !   Child: 0  Op: not
!   !   !   !   !   !   !   Child: 0  Id: x [mem: Local  size: 1  loc: -2]
!   !   !   Sibling: 3  Assign: =
!   !   !   !   Child: 0  Id: x [mem: Local  size: 1  loc: -2]
!   !   !   !   Child: 1  Op: [
!   !   !   !   !   Child: 0  Id: z [mem: Local  size: 33  loc: -5]
!   !   !   !   !   Child: 1  Const: 1
!   !   !   Sibling: 4  Assign: =
!   !   !   !   Child: 0  Op: [
!   !   !   !   !   Child: 0  Id: z [mem: Local  size: 33  loc: -5]
!   !   !   !   !   Child: 1  Const: 1
!   !   !   !   Child: 1  Id: x [mem: Local  size: 1  loc: -2]
!   !   !   Sibling: 5  Assign: =
!   !   !   !   Child: 0  Op: [
!   !   !   !   !   Child: 0  Id: z [mem: Local  size: 33  loc: -5]
!   !   !   !   !   Child: 1  Const: 1
!   !   !   !   Child: 1  Op: [
!   !   !   !   !   Child: 0  Id: z [mem: Local  size: 33  loc: -5]
!   !   !   !   !   Child: 1  Const: 2
!   !   !   Sibling: 6  Assign: =
!   !   !   !   Child: 0  Op: [
!   !   !   !   !   Child: 0  Id: z [mem: Local  size: 33  loc: -5]
!   !   !   !   !   Child: 1  Const: 1
!   !   !   !   Child: 1  Op: +
!   !   !   !   !   Child: 0  Op: [
!   !   !   !   !   !   Child: 0  Id: z [mem: Local  size: 33  loc: -5]
!   !   !   !   !   !   Child: 1  Const: 2
!   !   !   !   !   Child: 1  Op: [
!   !   !   !   !   !   Child: 0  Id: z [mem: Local  size: 33  loc: -5]
!   !   !   !   !   !   Child: 1  Const: 3
!   !   Sibling: 2  Compound
!   !   !   Child: 0  Var z is array of type bool [mem: Local  size: 4  loc: -3]
!   !   !   Child: 1  Assign: =
!   !   !   !   Child: 0  Id: x [mem: None  size: 1  loc: 0]
!   !   !   !   Child: 1  Op: [
!   !   !   !   !   Child: 0  Id: z [mem: Local  size: 4  loc: -3]
!   !   !   !   !   Child: 1  Const: 1
!   !   !   Sibling: 0  Assign: =
!   !   !   !   Child: 0  Op: [
!   !   !   !   !   Child: 0  Id: z [mem: Local  size: 4  loc: -3]
!   !   !   !   !   Child: 1  Const: 1
!   !   !   !   Child: 1  Id: x [mem: None  size: 1  loc: 0]
!   !   !   Sibling: 1  Assign: =
!   !   !   !   Child: 0  Op: [
!   !   !   !   !   Child: 0  Id: z [mem: Local  size: 4  loc: -3]
!   !   !   !   !   Child: 1  Const: 1
!   !   !   !   Child: 1  Op: [
!   !   !   !   !   Child: 0  Id: z [mem: Local  size: 4  loc: -3]
!   !   !   !   !   Child: 1  Const: 2
!   !   !   Sibling: 2  Assign: =
!   !   !   !   Child: 0  Op: [
!   !   !   !   !   Child: 0  Id: z [mem: Local  size: 4  loc: -3]
!   !   !   !   !   Child: 1  Const: 1
!   !   !   !   Child: 1  Op: +
!   !   !   !   !   Child: 0  Op: [
!   !   !   !   !   !   Child: 0  Id: z [mem: Local  size: 4  loc: -3]
!   !   !   !   !   !   Child: 1  Const: 2
!   !   !   !   !   Child: 1  Op: [
!   !   !   !   !   !   Child: 0  Id: z [mem: Local  size: 4  loc: -3]
!   !   !   !   !   !   Child: 1  Const: 3
!   !   !   Sibling: 3  Assign: =
!   !   !   !   Child: 0  Id: x [mem: None  size: 1  loc: 0]
!   !   !   !   Child: 1  Op: +
!   !   !   !   !   Child: 0  Op: +
!   !   !   !   !   !   Child: 0  Op: +
!   !   !   !   !   !   !   Child: 0  Op: [
!   !   !   !   !   !   !   !   Child: 0  Id: z [mem: Local  size: 4  loc: -3]
!   !   !   !   !   !   !   !   Child: 1  Const: 1
!   !   !   !   !   !   !   Child: 1  Op: *
!   !   !   !   !   !   !   !   Child: 0  Op: [
!   !   !   !   !   !   !   !   !   Child: 0  Id: z [mem: Local  size: 4  loc: -3]
!   !   !   !   !   !   !   !   !   Child: 1  Const: 2
!   !   !   !   !   !   !   !   Child: 1  Op: [
!   !   !   !   !   !   !   !   !   Child: 0  Id: z [mem: Local  size: 4  loc: -3]
!   !   !   !   !   !   !   !   !   Child: 1  Const: 0
!   !   !   !   !   !   Child: 1  Op: *
!   !   !   !   !   !   !   Child: 0  Op: [
!   !   !   !   !   !   !   !   Child: 0  Id: z [mem: Local  size: 4  loc: -3]
!   !   !   !   !   !   !   !   Child: 1  Const: 3
!   !   !   !   !   !   !   Child: 1  Const: 7
!   !   !   !   !   Child: 1  Op: *
!   !   !   !   !   !   Child: 0  Id: x [mem: None  size: 1  loc: 0]
!   !   !   !   !   !   Child: 1  Op: +
!   !   !   !   !   !   !   Child: 0  Op: [
!   !   !   !   !   !   !   !   Child: 0  Id: z [mem: Local  size: 4  loc: -3]
!   !   !   !   !   !   !   !   Child: 1  Const: 4
!   !   !   !   !   !   !   Child: 1  Id: g [mem: Global  size: 1  loc: 0]
!   !   Sibling: 3  Assign: =
!   !   !   Child: 0  Id: g [mem: Global  size: 1  loc: 0]
!   !   !   Child: 1  Assign: =
!   !   !   !   Child: 0  Id: g [mem: Global  size: 1  loc: 0]
!   !   !   !   Child: 1  Assign: =
!   !   !   !   !   Child: 0  Id: g [mem: Global  size: 1  loc: 0]
!   !   !   !   !   Child: 1  Const: 3
Offset for end of global space: -1
Number of warnings: 2
Number of errors: 17
