ERROR(16): '+' requires operands of type int but rhs is of type bool.
ERROR(17): '+' requires operands of type int but lhs is of type bool.
ERROR(18): '+' requires operands of type int but lhs is of type bool.
ERROR(18): '+' requires operands of type int but rhs is of type bool.
ERROR(20): 'and' requires operands of type bool but lhs is of type int.
ERROR(20): 'and' requires operands of type bool but rhs is of type int.
ERROR(21): 'and' requires operands of type bool but lhs is of type int.
ERROR(22): 'and' requires operands of type bool but rhs is of type int.
ERROR(26): '=' requires operands of the same type but lhs is type int and rhs is type bool.
ERROR(27): '=' requires operands of the same type but lhs is type bool and rhs is type int.
ERROR(31): '==' requires operands of the same type but lhs is type int and rhs is type bool.
ERROR(32): '==' requires operands of the same type but lhs is type bool and rhs is type int.
ERROR(36): '!=' requires operands of the same type but lhs is type int and rhs is type bool.
ERROR(37): '!=' requires operands of the same type but lhs is type bool and rhs is type int.
WARNING(40): Variable 'ia' may be uninitialized when used here.
ERROR(40): The operation '+' does not work with arrays.
WARNING(41): Variable 'ba' may be uninitialized when used here.
ERROR(41): '+' requires operands of type int but rhs is of type bool.
ERROR(41): The operation '+' does not work with arrays.
ERROR(42): '+' requires operands of type int but lhs is of type bool.
ERROR(42): The operation '+' does not work with arrays.
ERROR(43): '+' requires operands of type int but lhs is of type bool.
ERROR(43): '+' requires operands of type int but rhs is of type bool.
ERROR(43): The operation '+' does not work with arrays.
ERROR(45): 'and' requires operands of type bool but lhs is of type int.
ERROR(45): 'and' requires operands of type bool but rhs is of type int.
ERROR(45): The operation 'and' does not work with arrays.
ERROR(46): 'and' requires operands of type bool but lhs is of type int.
ERROR(46): The operation 'and' does not work with arrays.
ERROR(47): 'and' requires operands of type bool but rhs is of type int.
ERROR(47): The operation 'and' does not work with arrays.
ERROR(48): The operation 'and' does not work with arrays.
ERROR(51): '=' requires operands of the same type but lhs is type int and rhs is type bool.
ERROR(52): '=' requires operands of the same type but lhs is type bool and rhs is type int.
ERROR(56): '==' requires operands of the same type but lhs is type int and rhs is type bool.
ERROR(57): '==' requires operands of the same type but lhs is type bool and rhs is type int.
ERROR(60): '+' requires operands of type int but lhs is of type bool.
ERROR(61): '+' requires operands of type int but rhs is of type bool.
ERROR(62): '+' requires operands of type int but rhs is of type bool.
ERROR(64): 'or' requires operands of type bool but lhs is of type int.
ERROR(65): 'or' requires operands of type bool but rhs is of type int.
ERROR(66): 'or' requires operands of type bool but rhs is of type int.
ERROR(69): Unary 'not' requires an operand of type bool but was given type int.
ERROR(70): The operation 'not' does not work with arrays.
ERROR(71): Unary 'not' requires an operand of type bool but was given type int.
ERROR(71): The operation 'not' does not work with arrays.
ERROR(73): Unary '-' requires an operand of type int but was given type bool.
ERROR(75): Unary '-' requires an operand of type int but was given type bool.
ERROR(75): The operation '-' does not work with arrays.
ERROR(76): The operation '-' does not work with arrays.
ERROR(79): '>' requires operands of type char or type int but lhs is of type bool.
ERROR(80): '>' requires operands of type char or type int but rhs is of type bool.
ERROR(81): '>' requires operands of type char or type int but lhs is of type bool.
ERROR(82): '>' requires operands of type char or type int but lhs is of type bool.
ERROR(82): '>' requires operands of type char or type int but rhs is of type bool.
ERROR(85): Expecting Boolean test condition in if statement but got type int.
ERROR(88): Cannot use array as test condition in if statement.
ERROR(91): Expecting Boolean test condition in if statement but got type int.
ERROR(91): Cannot use array as test condition in if statement.
ERROR(97): Expecting Boolean test condition in if statement but got type int.
ERROR(100): Expecting Boolean test condition in while statement but got type int.
ERROR(101): Cannot use array as test condition in while statement.
ERROR(102): Expecting Boolean test condition in while statement but got type int.
ERROR(102): Cannot use array as test condition in while statement.
ERROR(104): Expecting Boolean test condition in while statement but got type int.
ERROR(106): Cannot use function 'main' as a variable.
ERROR(107): 'i' is a simple variable and cannot be called.
ERROR(109): Cannot index nonarray 'i'.
ERROR(110): Cannot index nonarray 'i'.
ERROR(112): '=' requires operands of the same type but lhs is type int and rhs is type char.
ERROR(113): '=' requires operands of the same type but lhs is type int and rhs is type bool.
ERROR(115): Cannot use function 'main' as a variable.
ERROR(116): Array index is the unindexed array 'ia'.
ERROR(118): The operation '*' only works with arrays.
WARNING(2): Expecting to return type int but function 'main' has no return statement.
WARNING(9): The variable 'ca' seems not to be used.
Func main returns type int [mem: Global  loc: 0]
!   Child: 1  Compound
!   !   Child: 0  Var i of type int [mem: Local  size: 1  loc: -2]
!   !   Sibling: 0  Var b of type bool [mem: Local  size: 1  loc: -3]
!   !   Sibling: 1  Var c of type char [mem: Local  size: 1  loc: -4]
!   !   Sibling: 2  Var ia is array of type int [mem: Local  size: 4  loc: -6]
!   !   Sibling: 3  Var ba is array of type bool [mem: Local  size: 4  loc: -10]
!   !   Sibling: 4  Var ca is array of type char [mem: Local  size: 4  loc: -14]
!   !   Child: 1  Assign: =
!   !   !   Child: 0  Id: i [mem: Local  size: 1  loc: -2]
!   !   !   Child: 1  Const: 666
!   !   Sibling: 0  Assign: =
!   !   !   Child: 0  Id: b [mem: Local  size: 1  loc: -3]
!   !   !   Child: 1  Const: true
!   !   Sibling: 1  Assign: =
!   !   !   Child: 0  Id: c [mem: Local  size: 1  loc: -4]
!   !   !   Child: 1  Const: 'X'
!   !   Sibling: 2  Op: +
!   !   !   Child: 0  Id: i [mem: Local  size: 1  loc: -2]
!   !   !   Child: 1  Id: i [mem: Local  size: 1  loc: -2]
!   !   Sibling: 3  Op: +
!   !   !   Child: 0  Id: i [mem: Local  size: 1  loc: -2]
!   !   !   Child: 1  Id: b [mem: Local  size: 1  loc: -3]
!   !   Sibling: 4  Op: +
!   !   !   Child: 0  Id: b [mem: Local  size: 1  loc: -3]
!   !   !   Child: 1  Id: i [mem: Local  size: 1  loc: -2]
!   !   Sibling: 5  Op: +
!   !   !   Child: 0  Id: b [mem: Local  size: 1  loc: -3]
!   !   !   Child: 1  Id: b [mem: Local  size: 1  loc: -3]
!   !   Sibling: 6  Op: and
!   !   !   Child: 0  Id: i [mem: Local  size: 1  loc: -2]
!   !   !   Child: 1  Id: i [mem: Local  size: 1  loc: -2]
!   !   Sibling: 7  Op: and
!   !   !   Child: 0  Id: i [mem: Local  size: 1  loc: -2]
!   !   !   Child: 1  Id: b [mem: Local  size: 1  loc: -3]
!   !   Sibling: 8  Op: and
!   !   !   Child: 0  Id: b [mem: Local  size: 1  loc: -3]
!   !   !   Child: 1  Id: i [mem: Local  size: 1  loc: -2]
!   !   Sibling: 9  Op: and
!   !   !   Child: 0  Id: b [mem: Local  size: 1  loc: -3]
!   !   !   Child: 1  Id: b [mem: Local  size: 1  loc: -3]
!   !   Sibling: 10  Assign: =
!   !   !   Child: 0  Id: i [mem: Local  size: 1  loc: -2]
!   !   !   Child: 1  Id: i [mem: Local  size: 1  loc: -2]
!   !   Sibling: 11  Assign: =
!   !   !   Child: 0  Id: i [mem: Local  size: 1  loc: -2]
!   !   !   Child: 1  Id: b [mem: Local  size: 1  loc: -3]
!   !   Sibling: 12  Assign: =
!   !   !   Child: 0  Id: b [mem: Local  size: 1  loc: -3]
!   !   !   Child: 1  Id: i [mem: Local  size: 1  loc: -2]
!   !   Sibling: 13  Assign: =
!   !   !   Child: 0  Id: b [mem: Local  size: 1  loc: -3]
!   !   !   Child: 1  Id: b [mem: Local  size: 1  loc: -3]
!   !   Sibling: 14  Op: ==
!   !   !   Child: 0  Id: i [mem: Local  size: 1  loc: -2]
!   !   !   Child: 1  Id: i [mem: Local  size: 1  loc: -2]
!   !   Sibling: 15  Op: ==
!   !   !   Child: 0  Id: i [mem: Local  size: 1  loc: -2]
!   !   !   Child: 1  Id: b [mem: Local  size: 1  loc: -3]
!   !   Sibling: 16  Op: ==
!   !   !   Child: 0  Id: b [mem: Local  size: 1  loc: -3]
!   !   !   Child: 1  Id: i [mem: Local  size: 1  loc: -2]
!   !   Sibling: 17  Op: ==
!   !   !   Child: 0  Id: b [mem: Local  size: 1  loc: -3]
!   !   !   Child: 1  Id: b [mem: Local  size: 1  loc: -3]
!   !   Sibling: 18  Op: !=
!   !   !   Child: 0  Id: i [mem: Local  size: 1  loc: -2]
!   !   !   Child: 1  Id: i [mem: Local  size: 1  loc: -2]
!   !   Sibling: 19  Op: !=
!   !   !   Child: 0  Id: i [mem: Local  size: 1  loc: -2]
!   !   !   Child: 1  Id: b [mem: Local  size: 1  loc: -3]
!   !   Sibling: 20  Op: !=
!   !   !   Child: 0  Id: b [mem: Local  size: 1  loc: -3]
!   !   !   Child: 1  Id: i [mem: Local  size: 1  loc: -2]
!   !   Sibling: 21  Op: !=
!   !   !   Child: 0  Id: b [mem: Local  size: 1  loc: -3]
!   !   !   Child: 1  Id: b [mem: Local  size: 1  loc: -3]
!   !   Sibling: 22  Op: +
!   !   !   Child: 0  Id: ia [mem: Local  size: 4  loc: -6]
!   !   !   Child: 1  Id: ia [mem: Local  size: 4  loc: -6]
!   !   Sibling: 23  Op: +
!   !   !   Child: 0  Id: ia [mem: Local  size: 4  loc: -6]
!   !   !   Child: 1  Id: ba [mem: Local  size: 4  loc: -10]
!   !   Sibling: 24  Op: +
!   !   !   Child: 0  Id: ba [mem: Local  size: 4  loc: -10]
!   !   !   Child: 1  Id: ia [mem: Local  size: 4  loc: -6]
!   !   Sibling: 25  Op: +
!   !   !   Child: 0  Id: ba [mem: Local  size: 4  loc: -10]
!   !   !   Child: 1  Id: ba [mem: Local  size: 4  loc: -10]
!   !   Sibling: 26  Op: and
!   !   !   Child: 0  Id: ia [mem: Local  size: 4  loc: -6]
!   !   !   Child: 1  Id: ia [mem: Local  size: 4  loc: -6]
!   !   Sibling: 27  Op: and
!   !   !   Child: 0  Id: ia [mem: Local  size: 4  loc: -6]
!   !   !   Child: 1  Id: ba [mem: Local  size: 4  loc: -10]
!   !   Sibling: 28  Op: and
!   !   !   Child: 0  Id: ba [mem: Local  size: 4  loc: -10]
!   !   !   Child: 1  Id: ia [mem: Local  size: 4  loc: -6]
!   !   Sibling: 29  Op: and
!   !   !   Child: 0  Id: ba [mem: Local  size: 4  loc: -10]
!   !   !   Child: 1  Id: ba [mem: Local  size: 4  loc: -10]
!   !   Sibling: 30  Assign: =
!   !   !   Child: 0  Id: ia [mem: Local  size: 4  loc: -6]
!   !   !   Child: 1  Id: ia [mem: Local  size: 4  loc: -6]
!   !   Sibling: 31  Assign: =
!   !   !   Child: 0  Id: ia [mem: Local  size: 4  loc: -6]
!   !   !   Child: 1  Id: ba [mem: Local  size: 4  loc: -10]
!   !   Sibling: 32  Assign: =
!   !   !   Child: 0  Id: ba [mem: Local  size: 4  loc: -10]
!   !   !   Child: 1  Id: ia [mem: Local  size: 4  loc: -6]
!   !   Sibling: 33  Assign: =
!   !   !   Child: 0  Id: ba [mem: Local  size: 4  loc: -10]
!   !   !   Child: 1  Id: ba [mem: Local  size: 4  loc: -10]
!   !   Sibling: 34  Op: ==
!   !   !   Child: 0  Id: ia [mem: Local  size: 4  loc: -6]
!   !   !   Child: 1  Id: ia [mem: Local  size: 4  loc: -6]
!   !   Sibling: 35  Op: ==
!   !   !   Child: 0  Id: ia [mem: Local  size: 4  loc: -6]
!   !   !   Child: 1  Id: ba [mem: Local  size: 4  loc: -10]
!   !   Sibling: 36  Op: ==
!   !   !   Child: 0  Id: ba [mem: Local  size: 4  loc: -10]
!   !   !   Child: 1  Id: ia [mem: Local  size: 4  loc: -6]
!   !   Sibling: 37  Op: ==
!   !   !   Child: 0  Id: ba [mem: Local  size: 4  loc: -10]
!   !   !   Child: 1  Id: ba [mem: Local  size: 4  loc: -10]
!   !   Sibling: 38  Op: +
!   !   !   Child: 0  Op: +
!   !   !   !   Child: 0  Id: b [mem: Local  size: 1  loc: -3]
!   !   !   !   Child: 1  Id: i [mem: Local  size: 1  loc: -2]
!   !   !   Child: 1  Id: i [mem: Local  size: 1  loc: -2]
!   !   Sibling: 39  Op: +
!   !   !   Child: 0  Op: +
!   !   !   !   Child: 0  Id: i [mem: Local  size: 1  loc: -2]
!   !   !   !   Child: 1  Id: b [mem: Local  size: 1  loc: -3]
!   !   !   Child: 1  Id: i [mem: Local  size: 1  loc: -2]
!   !   Sibling: 40  Op: +
!   !   !   Child: 0  Op: +
!   !   !   !   Child: 0  Id: i [mem: Local  size: 1  loc: -2]
!   !   !   !   Child: 1  Id: i [mem: Local  size: 1  loc: -2]
!   !   !   Child: 1  Id: b [mem: Local  size: 1  loc: -3]
!   !   Sibling: 41  Op: or
!   !   !   Child: 0  Op: or
!   !   !   !   Child: 0  Id: i [mem: Local  size: 1  loc: -2]
!   !   !   !   Child: 1  Id: b [mem: Local  size: 1  loc: -3]
!   !   !   Child: 1  Id: b [mem: Local  size: 1  loc: -3]
!   !   Sibling: 42  Op: or
!   !   !   Child: 0  Op: or
!   !   !   !   Child: 0  Id: b [mem: Local  size: 1  loc: -3]
!   !   !   !   Child: 1  Id: i [mem: Local  size: 1  loc: -2]
!   !   !   Child: 1  Id: b [mem: Local  size: 1  loc: -3]
!   !   Sibling: 43  Op: or
!   !   !   Child: 0  Op: or
!   !   !   !   Child: 0  Id: b [mem: Local  size: 1  loc: -3]
!   !   !   !   Child: 1  Id: b [mem: Local  size: 1  loc: -3]
!   !   !   Child: 1  Id: i [mem: Local  size: 1  loc: -2]
!   !   Sibling: 44  Op: not
!   !   !   Child: 0  Id: b [mem: Local  size: 1  loc: -3]
!   !   Sibling: 45  Op: not
!   !   !   Child: 0  Id: i [mem: Local  size: 1  loc: -2]
!   !   Sibling: 46  Op: not
!   !   !   Child: 0  Id: ba [mem: Local  size: 4  loc: -10]
!   !   Sibling: 47  Op: not
!   !   !   Child: 0  Id: ia [mem: Local  size: 4  loc: -6]
!   !   Sibling: 48  Op: -
!   !   !   Child: 0  Id: b [mem: Local  size: 1  loc: -3]
!   !   Sibling: 49  Op: -
!   !   !   Child: 0  Id: i [mem: Local  size: 1  loc: -2]
!   !   Sibling: 50  Op: -
!   !   !   Child: 0  Id: ba [mem: Local  size: 4  loc: -10]
!   !   Sibling: 51  Op: -
!   !   !   Child: 0  Id: ia [mem: Local  size: 4  loc: -6]
!   !   Sibling: 52  Op: or
!   !   !   Child: 0  Op: >
!   !   !   !   Child: 0  Id: i [mem: Local  size: 1  loc: -2]
!   !   !   !   Child: 1  Id: i [mem: Local  size: 1  loc: -2]
!   !   !   Child: 1  Op: >
!   !   !   !   Child: 0  Id: i [mem: Local  size: 1  loc: -2]
!   !   !   !   Child: 1  Id: i [mem: Local  size: 1  loc: -2]
!   !   Sibling: 53  Op: or
!   !   !   Child: 0  Op: >
!   !   !   !   Child: 0  Id: b [mem: Local  size: 1  loc: -3]
!   !   !   !   Child: 1  Id: i [mem: Local  size: 1  loc: -2]
!   !   !   Child: 1  Op: >
!   !   !   !   Child: 0  Id: i [mem: Local  size: 1  loc: -2]
!   !   !   !   Child: 1  Id: i [mem: Local  size: 1  loc: -2]
!   !   Sibling: 54  Op: or
!   !   !   Child: 0  Op: >
!   !   !   !   Child: 0  Id: i [mem: Local  size: 1  loc: -2]
!   !   !   !   Child: 1  Id: b [mem: Local  size: 1  loc: -3]
!   !   !   Child: 1  Op: >
!   !   !   !   Child: 0  Id: i [mem: Local  size: 1  loc: -2]
!   !   !   !   Child: 1  Id: i [mem: Local  size: 1  loc: -2]
!   !   Sibling: 55  Op: or
!   !   !   Child: 0  Op: >
!   !   !   !   Child: 0  Id: i [mem: Local  size: 1  loc: -2]
!   !   !   !   Child: 1  Id: i [mem: Local  size: 1  loc: -2]
!   !   !   Child: 1  Op: >
!   !   !   !   Child: 0  Id: b [mem: Local  size: 1  loc: -3]
!   !   !   !   Child: 1  Id: i [mem: Local  size: 1  loc: -2]
!   !   Sibling: 56  Op: or
!   !   !   Child: 0  Op: >
!   !   !   !   Child: 0  Id: b [mem: Local  size: 1  loc: -3]
!   !   !   !   Child: 1  Id: i [mem: Local  size: 1  loc: -2]
!   !   !   Child: 1  Op: >
!   !   !   !   Child: 0  Id: i [mem: Local  size: 1  loc: -2]
!   !   !   !   Child: 1  Id: b [mem: Local  size: 1  loc: -3]
!   !   Sibling: 57  Op: and
!   !   !   Child: 0  Op: or
!   !   !   !   Child: 0  Id: b [mem: Local  size: 1  loc: -3]
!   !   !   !   Child: 1  Id: b [mem: Local  size: 1  loc: -3]
!   !   !   Child: 1  Op: or
!   !   !   !   Child: 0  Id: b [mem: Local  size: 1  loc: -3]
!   !   !   !   Child: 1  Id: b [mem: Local  size: 1  loc: -3]
!   !   Sibling: 58  If
!   !   !   Child: 0  Const: 1
!   !   !   Child: 1  Assign: =
!   !   !   !   Child: 0  Id: i [mem: Local  size: 1  loc: -2]
!   !   !   !   Child: 1  Id: i [mem: Local  size: 1  loc: -2]
!   !   !   Child: 2  Assign: =
!   !   !   !   Child: 0  Id: b [mem: Local  size: 1  loc: -3]
!   !   !   !   Child: 1  Id: b [mem: Local  size: 1  loc: -3]
!   !   Sibling: 59  If
!   !   !   Child: 0  Id: ba [mem: Local  size: 4  loc: -10]
!   !   !   Child: 1  Assign: =
!   !   !   !   Child: 0  Id: i [mem: Local  size: 1  loc: -2]
!   !   !   !   Child: 1  Id: i [mem: Local  size: 1  loc: -2]
!   !   !   Child: 2  Assign: =
!   !   !   !   Child: 0  Id: b [mem: Local  size: 1  loc: -3]
!   !   !   !   Child: 1  Id: b [mem: Local  size: 1  loc: -3]
!   !   Sibling: 60  If
!   !   !   Child: 0  Id: ia [mem: Local  size: 4  loc: -6]
!   !   !   Child: 1  Assign: =
!   !   !   !   Child: 0  Id: i [mem: Local  size: 1  loc: -2]
!   !   !   !   Child: 1  Id: i [mem: Local  size: 1  loc: -2]
!   !   !   Child: 2  Assign: =
!   !   !   !   Child: 0  Id: b [mem: Local  size: 1  loc: -3]
!   !   !   !   Child: 1  Id: b [mem: Local  size: 1  loc: -3]
!   !   Sibling: 61  If
!   !   !   Child: 0  Id: b [mem: Local  size: 1  loc: -3]
!   !   !   Child: 1  Assign: =
!   !   !   !   Child: 0  Id: i [mem: Local  size: 1  loc: -2]
!   !   !   !   Child: 1  Id: i [mem: Local  size: 1  loc: -2]
!   !   !   Child: 2  Assign: =
!   !   !   !   Child: 0  Id: b [mem: Local  size: 1  loc: -3]
!   !   !   !   Child: 1  Id: b [mem: Local  size: 1  loc: -3]
!   !   Sibling: 62  If
!   !   !   Child: 0  Id: i [mem: Local  size: 1  loc: -2]
!   !   !   Child: 1  Assign: =
!   !   !   !   Child: 0  Id: i [mem: Local  size: 1  loc: -2]
!   !   !   !   Child: 1  Id: i [mem: Local  size: 1  loc: -2]
!   !   !   Child: 2  Assign: =
!   !   !   !   Child: 0  Id: b [mem: Local  size: 1  loc: -3]
!   !   !   !   Child: 1  Id: b [mem: Local  size: 1  loc: -3]
!   !   Sibling: 63  While
!   !   !   Child: 0  Const: 1
!   !   !   Child: 1  Assign: =
!   !   !   !   Child: 0  Id: i [mem: Local  size: 1  loc: -2]
!   !   !   !   Child: 1  Id: i [mem: Local  size: 1  loc: -2]
!   !   Sibling: 64  While
!   !   !   Child: 0  Id: ba [mem: Local  size: 4  loc: -10]
!   !   !   Child: 1  Assign: =
!   !   !   !   Child: 0  Id: i [mem: Local  size: 1  loc: -2]
!   !   !   !   Child: 1  Id: i [mem: Local  size: 1  loc: -2]
!   !   Sibling: 65  While
!   !   !   Child: 0  Id: ia [mem: Local  size: 4  loc: -6]
!   !   !   Child: 1  Assign: =
!   !   !   !   Child: 0  Id: i [mem: Local  size: 1  loc: -2]
!   !   !   !   Child: 1  Id: i [mem: Local  size: 1  loc: -2]
!   !   Sibling: 66  While
!   !   !   Child: 0  Id: b [mem: Local  size: 1  loc: -3]
!   !   !   Child: 1  Assign: =
!   !   !   !   Child: 0  Id: i [mem: Local  size: 1  loc: -2]
!   !   !   !   Child: 1  Id: i [mem: Local  size: 1  loc: -2]
!   !   Sibling: 67  While
!   !   !   Child: 0  Id: i [mem: Local  size: 1  loc: -2]
!   !   !   Child: 1  Assign: =
!   !   !   !   Child: 0  Id: i [mem: Local  size: 1  loc: -2]
!   !   !   !   Child: 1  Id: i [mem: Local  size: 1  loc: -2]
!   !   Sibling: 68  Assign: =
!   !   !   Child: 0  Id: main [mem: Local  size: 1  loc: 0]
!   !   !   Child: 1  Const: 4
!   !   Sibling: 69  Call: i
!   !   Sibling: 70  Assign: =
!   !   !   Child: 0  Op: [
!   !   !   !   Child: 0  Id: i [mem: Local  size: 1  loc: -2]
!   !   !   !   Child: 1  Const: 2
!   !   !   Child: 1  Const: 0
!   !   Sibling: 71  Op: +
!   !   !   Child: 0  Const: 3
!   !   !   Child: 1  Op: [
!   !   !   !   Child: 0  Id: i [mem: Local  size: 1  loc: -2]
!   !   !   !   Child: 1  Const: 2
!   !   Sibling: 72  Assign: =
!   !   !   Child: 0  Op: [
!   !   !   !   Child: 0  Id: ia [mem: Local  size: 4  loc: -6]
!   !   !   !   Child: 1  Const: 2
!   !   !   Child: 1  Const: 'a'
!   !   Sibling: 73  Assign: =
!   !   !   Child: 0  Op: [
!   !   !   !   Child: 0  Id: ia [mem: Local  size: 4  loc: -6]
!   !   !   !   Child: 1  Const: 2
!   !   !   Child: 1  Const: true
!   !   Sibling: 74  Op: [
!   !   !   Child: 0  Id: ia [mem: Local  size: 4  loc: -6]
!   !   !   Child: 1  Op: [
!   !   !   !   Child: 0  Id: ia [mem: Local  size: 4  loc: -6]
!   !   !   !   Child: 1  Const: 1
!   !   Sibling: 75  Op: [
!   !   !   Child: 0  Id: ia [mem: Local  size: 4  loc: -6]
!   !   !   Child: 1  Id: main [mem: Local  size: 1  loc: 0]
!   !   Sibling: 76  Op: [
!   !   !   Child: 0  Id: ia [mem: Local  size: 4  loc: -6]
!   !   !   Child: 1  Id: ia [mem: Local  size: 4  loc: -6]
!   !   Sibling: 77  Op: *
!   !   !   Child: 0  Id: ia [mem: Local  size: 4  loc: -6]
!   !   Sibling: 78  Op: *
!   !   !   Child: 0  Id: i [mem: Local  size: 1  loc: -2]
Offset for end of global space: 0
Number of warnings: 4
Number of errors: 72
