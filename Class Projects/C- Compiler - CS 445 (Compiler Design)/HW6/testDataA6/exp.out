ERROR(26): 'and' requires operands of type bool but rhs is of type int.
ERROR(26): 'or' requires operands of type bool but rhs is of type int.
WARNING(32): Variable 'z' may be uninitialized when used here.
ERROR(35): '+' requires operands of type int but lhs is of type bool.
ERROR(35): '+' requires operands of type int but rhs is of type bool.
ERROR(35): '=' requires operands of the same type but lhs is type bool and rhs is type int.
ERROR(40): Symbol 'x' is not declared.
WARNING(40): Variable 'z' may be uninitialized when used here.
ERROR(41): Symbol 'x' is not declared.
ERROR(42): Symbol 'x' is not declared.
ERROR(45): Symbol 'x' is not declared.
ERROR(45): Symbol 'x' is not declared.
WARNING(50): Variable 'c' may be uninitialized when used here.
WARNING(51): Variable 'd' may be uninitialized when used here.
WARNING(59): Variable 'x' may be uninitialized when used here.
WARNING(59): Variable 'y' may be uninitialized when used here.
WARNING(59): Variable 'b' may be uninitialized when used here.
WARNING(59): Variable 'a' may be uninitialized when used here.
Var g of type int [mem: Global  size: 1  loc: 0]
Sibling: 0  Func main returns type void [mem: Global  loc: 0]
!   Child: 1  Compound
!   !   Child: 1  Compound
!   !   !   Child: 0  Var x of type int [mem: Local  size: 1  loc: -2]
!   !   !   Sibling: 0  Var y of type int [mem: Local  size: 1  loc: -3]
!   !   !   Child: 1  Assign: =
!   !   !   !   Child: 0  Id: x [mem: Local  size: 1  loc: -2]
!   !   !   !   Child: 1  Const: 11
!   !   !   Sibling: 0  Assign: =
!   !   !   !   Child: 0  Id: y [mem: Local  size: 1  loc: -3]
!   !   !   !   Child: 1  Const: 12
!   !   !   Sibling: 1  Assign: =
!   !   !   !   Child: 0  Id: g [mem: Global  size: 1  loc: 0]
!   !   !   !   Child: 1  Const: 13
!   !   !   Sibling: 2  Assign: =
!   !   !   !   Child: 0  Id: x [mem: Local  size: 1  loc: -2]
!   !   !   !   Child: 1  Op: +
!   !   !   !   !   Child: 0  Op: +
!   !   !   !   !   !   Child: 0  Op: +
!   !   !   !   !   !   !   Child: 0  Const: 3
!   !   !   !   !   !   !   Child: 1  Op: *
!   !   !   !   !   !   !   !   Child: 0  Const: 4
!   !   !   !   !   !   !   !   Child: 1  Id: x [mem: Local  size: 1  loc: -2]
!   !   !   !   !   !   Child: 1  Op: *
!   !   !   !   !   !   !   Child: 0  Id: y [mem: Local  size: 1  loc: -3]
!   !   !   !   !   !   !   Child: 1  Const: 7
!   !   !   !   !   Child: 1  Op: *
!   !   !   !   !   !   Child: 0  Id: x [mem: Local  size: 1  loc: -2]
!   !   !   !   !   !   Child: 1  Op: +
!   !   !   !   !   !   !   Child: 0  Id: y [mem: Local  size: 1  loc: -3]
!   !   !   !   !   !   !   Child: 1  Id: g [mem: Global  size: 1  loc: 0]
!   !   !   Sibling: 3  Assign: =
!   !   !   !   Child: 0  Id: x [mem: Local  size: 1  loc: -2]
!   !   !   !   Child: 1  Op: -
!   !   !   !   !   Child: 0  Op: -
!   !   !   !   !   !   Child: 0  Op: -
!   !   !   !   !   !   !   Child: 0  Const: 3
!   !   !   !   !   !   !   Child: 1  Op: /
!   !   !   !   !   !   !   !   Child: 0  Const: 4
!   !   !   !   !   !   !   !   Child: 1  Id: x [mem: Local  size: 1  loc: -2]
!   !   !   !   !   !   Child: 1  Op: /
!   !   !   !   !   !   !   Child: 0  Id: y [mem: Local  size: 1  loc: -3]
!   !   !   !   !   !   !   Child: 1  Const: 7
!   !   !   !   !   Child: 1  Op: /
!   !   !   !   !   !   Child: 0  Id: x [mem: Local  size: 1  loc: -2]
!   !   !   !   !   !   Child: 1  Op: -
!   !   !   !   !   !   !   Child: 0  Id: y [mem: Local  size: 1  loc: -3]
!   !   !   !   !   !   !   Child: 1  Id: g [mem: Global  size: 1  loc: 0]
!   !   !   Sibling: 4  Assign: =
!   !   !   !   Child: 0  Id: x [mem: Local  size: 1  loc: -2]
!   !   !   !   Child: 1  Op: /
!   !   !   !   !   Child: 0  Op: %
!   !   !   !   !   !   Child: 0  Op: /
!   !   !   !   !   !   !   Child: 0  Op: %
!   !   !   !   !   !   !   !   Child: 0  Const: 3
!   !   !   !   !   !   !   !   Child: 1  Const: 4
!   !   !   !   !   !   !   Child: 1  Id: x [mem: Local  size: 1  loc: -2]
!   !   !   !   !   !   Child: 1  Op: %
!   !   !   !   !   !   !   Child: 0  Op: /
!   !   !   !   !   !   !   !   Child: 0  Id: y [mem: Local  size: 1  loc: -3]
!   !   !   !   !   !   !   !   Child: 1  Const: 7
!   !   !   !   !   !   !   Child: 1  Id: x [mem: Local  size: 1  loc: -2]
!   !   !   !   !   Child: 1  Op: %
!   !   !   !   !   !   Child: 0  Id: y [mem: Local  size: 1  loc: -3]
!   !   !   !   !   !   Child: 1  Id: g [mem: Global  size: 1  loc: 0]
!   !   Sibling: 0  Compound
!   !   !   Child: 0  Var x of type bool [mem: Local  size: 1  loc: -2]
!   !   !   Sibling: 0  Var y of type bool [mem: Local  size: 1  loc: -3]
!   !   !   Sibling: 1  Var z is array of type bool [mem: Local  size: 33  loc: -5]
!   !   !   Child: 1  Assign: =
!   !   !   !   Child: 0  Id: x [mem: Local  size: 1  loc: -2]
!   !   !   !   Child: 1  Const: true
!   !   !   Sibling: 0  Assign: =
!   !   !   !   Child: 0  Id: y [mem: Local  size: 1  loc: -3]
!   !   !   !   Child: 1  Const: false
!   !   !   Sibling: 1  Assign: =
!   !   !   !   Child: 0  Id: x [mem: Local  size: 1  loc: -2]
!   !   !   !   Child: 1  Op: or
!   !   !   !   !   Child: 0  Op: or
!   !   !   !   !   !   Child: 0  Op: or
!   !   !   !   !   !   !   Child: 0  Const: true
!   !   !   !   !   !   !   Child: 1  Op: and
!   !   !   !   !   !   !   !   Child: 0  Const: false
!   !   !   !   !   !   !   !   Child: 1  Id: x [mem: Local  size: 1  loc: -2]
!   !   !   !   !   !   Child: 1  Op: and
!   !   !   !   !   !   !   Child: 0  Id: y [mem: Local  size: 1  loc: -3]
!   !   !   !   !   !   !   Child: 1  Const: 7
!   !   !   !   !   Child: 1  Op: and
!   !   !   !   !   !   Child: 0  Id: x [mem: Local  size: 1  loc: -2]
!   !   !   !   !   !   Child: 1  Op: or
!   !   !   !   !   !   !   Child: 0  Id: y [mem: Local  size: 1  loc: -3]
!   !   !   !   !   !   !   Child: 1  Id: g [mem: Global  size: 1  loc: 0]
!   !   !   Sibling: 2  Assign: =
!   !   !   !   Child: 0  Id: x [mem: Local  size: 1  loc: -2]
!   !   !   !   Child: 1  Op: or
!   !   !   !   !   Child: 0  Op: not
!   !   !   !   !   !   Child: 0  Const: true
!   !   !   !   !   Child: 1  Op: not
!   !   !   !   !   !   Child: 0  Op: not
!   !   !   !   !   !   !   Child: 0  Id: x [mem: Local  size: 1  loc: -2]
!   !   !   Sibling: 3  Assign: =
!   !   !   !   Child: 0  Id: x [mem: Local  size: 1  loc: -2]
!   !   !   !   Child: 1  Op: and
!   !   !   !   !   Child: 0  Op: and
!   !   !   !   !   !   Child: 0  Id: x [mem: Local  size: 1  loc: -2]
!   !   !   !   !   !   Child: 1  Id: y [mem: Local  size: 1  loc: -3]
!   !   !   !   !   Child: 1  Id: x [mem: Local  size: 1  loc: -2]
!   !   !   Sibling: 4  Assign: =
!   !   !   !   Child: 0  Id: x [mem: Local  size: 1  loc: -2]
!   !   !   !   Child: 1  Op: or
!   !   !   !   !   Child: 0  Op: or
!   !   !   !   !   !   Child: 0  Id: x [mem: Local  size: 1  loc: -2]
!   !   !   !   !   !   Child: 1  Id: y [mem: Local  size: 1  loc: -3]
!   !   !   !   !   Child: 1  Id: x [mem: Local  size: 1  loc: -2]
!   !   !   Sibling: 5  Assign: =
!   !   !   !   Child: 0  Id: x [mem: Local  size: 1  loc: -2]
!   !   !   !   Child: 1  Op: [
!   !   !   !   !   Child: 0  Id: z [mem: Local  size: 33  loc: -5]
!   !   !   !   !   Child: 1  Const: 1
!   !   !   Sibling: 6  Assign: =
!   !   !   !   Child: 0  Op: [
!   !   !   !   !   Child: 0  Id: z [mem: Local  size: 33  loc: -5]
!   !   !   !   !   Child: 1  Const: 1
!   !   !   !   Child: 1  Id: x [mem: Local  size: 1  loc: -2]
!   !   !   Sibling: 7  Assign: =
!   !   !   !   Child: 0  Op: [
!   !   !   !   !   Child: 0  Id: z [mem: Local  size: 33  loc: -5]
!   !   !   !   !   Child: 1  Const: 1
!   !   !   !   Child: 1  Op: [
!   !   !   !   !   Child: 0  Id: z [mem: Local  size: 33  loc: -5]
!   !   !   !   !   Child: 1  Const: 2
!   !   !   Sibling: 8  Assign: =
!   !   !   !   Child: 0  Op: [
!   !   !   !   !   Child: 0  Id: z [mem: Local  size: 33  loc: -5]
!   !   !   !   !   Child: 1  Const: 1
!   !   !   !   Child: 1  Op: +
!   !   !   !   !   Child: 0  Op: +
!   !   !   !   !   !   Child: 0  Op: [
!   !   !   !   !   !   !   Child: 0  Id: z [mem: Local  size: 33  loc: -5]
!   !   !   !   !   !   !   Child: 1  Const: 2
!   !   !   !   !   !   Child: 1  Op: [
!   !   !   !   !   !   !   Child: 0  Id: z [mem: Local  size: 33  loc: -5]
!   !   !   !   !   !   !   Child: 1  Const: 3
!   !   !   !   !   Child: 1  Op: *
!   !   !   !   !   !   Child: 0  Id: z [mem: Local  size: 33  loc: -5]
!   !   Sibling: 1  Compound
!   !   !   Child: 0  Var z is array of type int [mem: Local  size: 4  loc: -3]
!   !   !   Child: 1  Assign: =
!   !   !   !   Child: 0  Id: x [mem: None  size: 1  loc: 0]
!   !   !   !   Child: 1  Op: [
!   !   !   !   !   Child: 0  Id: z [mem: Local  size: 4  loc: -3]
!   !   !   !   !   Child: 1  Const: 1
!   !   !   Sibling: 0  Assign: =
!   !   !   !   Child: 0  Id: x [mem: None  size: 1  loc: 0]
!   !   !   !   Child: 1  Op: ?
!   !   !   !   !   Child: 0  Op: [
!   !   !   !   !   !   Child: 0  Id: z [mem: Local  size: 4  loc: -3]
!   !   !   !   !   !   Child: 1  Const: 1
!   !   !   Sibling: 1  Assign: =
!   !   !   !   Child: 0  Op: [
!   !   !   !   !   Child: 0  Id: z [mem: Local  size: 4  loc: -3]
!   !   !   !   !   Child: 1  Const: 1
!   !   !   !   Child: 1  Id: x [mem: None  size: 1  loc: 0]
!   !   !   Sibling: 2  Assign: =
!   !   !   !   Child: 0  Op: [
!   !   !   !   !   Child: 0  Id: z [mem: Local  size: 4  loc: -3]
!   !   !   !   !   Child: 1  Const: 1
!   !   !   !   Child: 1  Op: [
!   !   !   !   !   Child: 0  Id: z [mem: Local  size: 4  loc: -3]
!   !   !   !   !   Child: 1  Const: 2
!   !   !   Sibling: 3  Assign: =
!   !   !   !   Child: 0  Op: [
!   !   !   !   !   Child: 0  Id: z [mem: Local  size: 4  loc: -3]
!   !   !   !   !   Child: 1  Const: 1
!   !   !   !   Child: 1  Op: +
!   !   !   !   !   Child: 0  Op: [
!   !   !   !   !   !   Child: 0  Id: z [mem: Local  size: 4  loc: -3]
!   !   !   !   !   !   Child: 1  Const: 2
!   !   !   !   !   Child: 1  Op: [
!   !   !   !   !   !   Child: 0  Id: z [mem: Local  size: 4  loc: -3]
!   !   !   !   !   !   Child: 1  Const: 3
!   !   !   Sibling: 4  Assign: =
!   !   !   !   Child: 0  Id: x [mem: None  size: 1  loc: 0]
!   !   !   !   Child: 1  Op: +
!   !   !   !   !   Child: 0  Op: +
!   !   !   !   !   !   Child: 0  Op: +
!   !   !   !   !   !   !   Child: 0  Op: [
!   !   !   !   !   !   !   !   Child: 0  Id: z [mem: Local  size: 4  loc: -3]
!   !   !   !   !   !   !   !   Child: 1  Const: 1
!   !   !   !   !   !   !   Child: 1  Op: *
!   !   !   !   !   !   !   !   Child: 0  Op: [
!   !   !   !   !   !   !   !   !   Child: 0  Id: z [mem: Local  size: 4  loc: -3]
!   !   !   !   !   !   !   !   !   Child: 1  Const: 2
!   !   !   !   !   !   !   !   Child: 1  Op: [
!   !   !   !   !   !   !   !   !   Child: 0  Id: z [mem: Local  size: 4  loc: -3]
!   !   !   !   !   !   !   !   !   Child: 1  Const: 0
!   !   !   !   !   !   Child: 1  Op: *
!   !   !   !   !   !   !   Child: 0  Op: [
!   !   !   !   !   !   !   !   Child: 0  Id: z [mem: Local  size: 4  loc: -3]
!   !   !   !   !   !   !   !   Child: 1  Const: 3
!   !   !   !   !   !   !   Child: 1  Const: 7
!   !   !   !   !   Child: 1  Op: *
!   !   !   !   !   !   Child: 0  Id: x [mem: None  size: 1  loc: 0]
!   !   !   !   !   !   Child: 1  Op: +
!   !   !   !   !   !   !   Child: 0  Op: [
!   !   !   !   !   !   !   !   Child: 0  Id: z [mem: Local  size: 4  loc: -3]
!   !   !   !   !   !   !   !   Child: 1  Const: 4
!   !   !   !   !   !   !   Child: 1  Id: g [mem: Global  size: 1  loc: 0]
!   !   Sibling: 2  Compound
!   !   !   Child: 0  Var a of type int [mem: Local  size: 1  loc: -2]
!   !   !   Sibling: 0  Var b of type int [mem: Local  size: 1  loc: -3]
!   !   !   Sibling: 1  Var c of type int [mem: Local  size: 1  loc: -4]
!   !   !   Sibling: 2  Var d of type int [mem: Local  size: 1  loc: -5]
!   !   !   Child: 1  Assign: =
!   !   !   !   Child: 0  Id: a [mem: Local  size: 1  loc: -2]
!   !   !   !   Child: 1  Assign: =
!   !   !   !   !   Child: 0  Id: b [mem: Local  size: 1  loc: -3]
!   !   !   !   !   Child: 1  Id: c [mem: Local  size: 1  loc: -4]
!   !   !   Sibling: 0  Assign: =
!   !   !   !   Child: 0  Id: a [mem: Local  size: 1  loc: -2]
!   !   !   !   Child: 1  Op: +
!   !   !   !   !   Child: 0  Op: +
!   !   !   !   !   !   Child: 0  Id: b [mem: Local  size: 1  loc: -3]
!   !   !   !   !   !   Child: 1  Id: c [mem: Local  size: 1  loc: -4]
!   !   !   !   !   Child: 1  Id: d [mem: Local  size: 1  loc: -5]
!   !   !   Sibling: 1  Assign: =
!   !   !   !   Child: 0  Id: a [mem: Local  size: 1  loc: -2]
!   !   !   !   Child: 1  Op: *
!   !   !   !   !   Child: 0  Op: *
!   !   !   !   !   !   Child: 0  Id: b [mem: Local  size: 1  loc: -3]
!   !   !   !   !   !   Child: 1  Id: c [mem: Local  size: 1  loc: -4]
!   !   !   !   !   Child: 1  Id: d [mem: Local  size: 1  loc: -5]
!   !   !   Sibling: 2  Assign: =
!   !   !   !   Child: 0  Id: g [mem: Global  size: 1  loc: 0]
!   !   !   !   Child: 1  Assign: +=
!   !   !   !   !   Child: 0  Id: a [mem: Local  size: 1  loc: -2]
!   !   !   !   !   Child: 1  Assign: -=
!   !   !   !   !   !   Child: 0  Id: b [mem: Local  size: 1  loc: -3]
!   !   !   !   !   !   Child: 1  Op: +
!   !   !   !   !   !   !   Child: 0  Id: c [mem: Local  size: 1  loc: -4]
!   !   !   !   !   !   !   Child: 1  Id: d [mem: Local  size: 1  loc: -5]
!   !   !   Sibling: 3  Assign: =
!   !   !   !   Child: 0  Id: a [mem: Local  size: 1  loc: -2]
!   !   !   !   Child: 1  Op: +
!   !   !   !   !   Child: 0  Assign: =
!   !   !   !   !   !   Child: 0  Id: b [mem: Local  size: 1  loc: -3]
!   !   !   !   !   !   Child: 1  Const: 3
!   !   !   !   !   Child: 1  Assign: =
!   !   !   !   !   !   Child: 0  Id: c [mem: Local  size: 1  loc: -4]
!   !   !   !   !   !   Child: 1  Const: 4
!   !   Sibling: 3  Compound
!   !   !   Child: 0  Var a of type int [mem: Local  size: 1  loc: -2]
!   !   !   Sibling: 0  Var b of type int [mem: Local  size: 1  loc: -3]
!   !   !   Sibling: 1  Var x of type bool [mem: Local  size: 1  loc: -4]
!   !   !   Sibling: 2  Var y of type bool [mem: Local  size: 1  loc: -5]
!   !   !   Child: 1  Assign: =
!   !   !   !   Child: 0  Id: x [mem: Local  size: 1  loc: -4]
!   !   !   !   Child: 1  Op: or
!   !   !   !   !   Child: 0  Id: x [mem: Local  size: 1  loc: -4]
!   !   !   !   !   Child: 1  Op: and
!   !   !   !   !   !   Child: 0  Id: y [mem: Local  size: 1  loc: -5]
!   !   !   !   !   !   Child: 1  Op: >
!   !   !   !   !   !   !   Child: 0  Op: *
!   !   !   !   !   !   !   !   Child: 0  Id: b [mem: Local  size: 1  loc: -3]
!   !   !   !   !   !   !   !   Child: 1  Id: a [mem: Local  size: 1  loc: -2]
!   !   !   !   !   !   !   Child: 1  Op: +
!   !   !   !   !   !   !   !   Child: 0  Id: a [mem: Local  size: 1  loc: -2]
!   !   !   !   !   !   !   !   Child: 1  Id: b [mem: Local  size: 1  loc: -3]
Offset for end of global space: -1
Number of warnings: 8
Number of errors: 10
