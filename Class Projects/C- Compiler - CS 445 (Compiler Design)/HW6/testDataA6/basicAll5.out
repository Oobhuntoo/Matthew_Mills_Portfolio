ERROR(13): Symbol 'x' is already declared at line 11.
ERROR(17): Symbol 'cat' is not declared.
WARNING(19): Variable 'b' may be uninitialized when used here.
ERROR(19): Function 'dog' at line 11 is expecting to return type char but got type int.
WARNING(11): The parameter 'x' seems not to be used.
ERROR(22): Symbol 'dog' is already declared at line 11.
WARNING(25): The variable 'x' seems not to be used.
WARNING(22): Expecting to return type int but function 'dog' has no return statement.
WARNING(22): The parameter 'x' seems not to be used.
ERROR(31): Variable 'b' is of type int but is being initialized with an expression of type char.
ERROR(33): Initializer for variable 'd' is not a constant expression.
ERROR(36): Function 'cat' at line 29 is expecting to return type char but return has no return value.
WARNING(32): The variable 'c' seems not to be used.
WARNING(33): The variable 'd' seems not to be used.
WARNING(34): The variable 'e' seems not to be used.
WARNING(29): The parameter 'x' seems not to be used.
ERROR(39): Symbol 'cat' is already declared at line 29.
ERROR(45): Function 'ibex' at line 42 is expecting to return type int but got type bool.
WARNING(44): The variable 'unusedLocal' seems not to be used.
WARNING(42): The parameter 'x' seems not to be used.
ERROR(50): Function 'ox' at line 48 is expecting no return value, but return has return value.
WARNING(48): The parameter 'y' seems not to be used.
WARNING(53): Expecting to return type char but function 'emu' has no return statement.
WARNING(53): The parameter 'x' seems not to be used.
WARNING(53): The parameter 'y' seems not to be used.
WARNING(53): The parameter 'z' seems not to be used.
ERROR(60): Symbol 'x' is already declared at line 59.
ERROR(61): Symbol 'x' is already declared at line 59.
ERROR(70): Symbol 'v' is not declared.
WARNING(72): Variable 'x' may be uninitialized when used here.
ERROR(72): Expecting Boolean test condition in if statement but got type char.
ERROR(73): Expecting Boolean test condition in elsif statement but got type char.
ERROR(74): Expecting Boolean test condition in while statement but got type char.
ERROR(75): Expecting type char in parameter 1 of call to 'ox' declared on line 48 but got type int.
ERROR(75): Expecting Boolean test condition in while statement but got type void.
ERROR(78): Expecting integer in range for loop statement but got type bool.
WARNING(78): The variable 'i' seems not to be used.
ERROR(79): Expecting integer in range for loop statement but got type char.
WARNING(79): The variable 'i' seems not to be used.
ERROR(80): Expecting integer in range for loop statement but got type char.
WARNING(80): The variable 'i' seems not to be used.
ERROR(82): Cannot use function 'cat' as a variable.
WARNING(83): Variable 'b' may be uninitialized when used here.
ERROR(83): '=' requires operands of the same type but lhs is type char and rhs is type int.
ERROR(84): '+=' requires operands of type int but lhs is of type char.
ERROR(85): '-=' requires operands of type int but rhs is of type char.
ERROR(86): '>' requires operands of the same type but lhs is type int and rhs is type char.
WARNING(89): Variable 'bb' may be uninitialized when used here.
ERROR(89): Expecting Boolean test condition in if statement but got type int.
ERROR(89): Cannot use array as test condition in if statement.
ERROR(90): Expecting Boolean test condition in elsif statement but got type int.
ERROR(90): Cannot use array as test condition in elsif statement.
ERROR(91): Expecting Boolean test condition in while statement but got type int.
ERROR(91): Cannot use array as test condition in while statement.
ERROR(93): Cannot have a break statement outside of loop.
ERROR(95): Expecting Boolean test condition in while statement but got type int.
ERROR(96): Expecting Boolean test condition in while statement but got type int.
ERROR(96): Expecting Boolean test condition in while statement but got type int.
WARNING(98): Variable 'aa' may be uninitialized when used here.
ERROR(98): '+' requires operands of type int but lhs is of type char.
ERROR(98): The operation '+' does not work with arrays.
WARNING(99): Variable 'zz' may be uninitialized when used here.
ERROR(99): The operation '<' does not work with arrays.
WARNING(100): Variable 'cc' may be uninitialized when used here.
ERROR(100): The operation '<' does not work with arrays.
ERROR(102): '==' requires operands of the same type but lhs is type char and rhs is type bool.
ERROR(103): '==' requires operands of the same type but lhs is type char and rhs is type int.
ERROR(104): '==' requires operands of the same type but lhs is type int and rhs is type bool.
ERROR(106): '+' requires operands of type int but lhs is of type bool.
ERROR(106): '+' requires operands of type int but rhs is of type char.
ERROR(108): '*' requires operands of type int but lhs is of type char.
ERROR(108): '*' requires operands of type int but rhs is of type bool.
ERROR(110): Unary 'not' requires an operand of type bool but was given type char.
ERROR(111): '+' requires operands of type int but lhs is of type char.
ERROR(111): Unary 'not' requires an operand of type bool but was given type int.
ERROR(114): Cannot index nonarray 'x'.
ERROR(116): 'and' requires operands of type bool but lhs is of type char.
ERROR(116): 'and' requires operands of type bool but rhs is of type char.
ERROR(116): '*' requires operands of type int but lhs is of type char.
ERROR(116): '*' requires operands of type int but rhs is of type bool.
ERROR(116): '+' requires operands of type int but lhs is of type char.
ERROR(116): '==' requires operands of the same type but lhs is type char and rhs is type int.
ERROR(116): '=' requires operands of the same type but lhs is type int and rhs is type bool.
ERROR(117): Symbol 'y' is not declared.
ERROR(117): 'and' requires operands of type bool but lhs is of type char.
ERROR(117): '*' requires operands of type int but lhs is of type char.
ERROR(117): '*' requires operands of type int but rhs is of type bool.
ERROR(117): '+' requires operands of type int but lhs is of type char.
ERROR(117): '==' requires operands of the same type but lhs is type char and rhs is type int.
ERROR(117): '=' requires operands of the same type but lhs is type int and rhs is type bool.
ERROR(118): 'and' requires operands of type bool but lhs is of type char.
ERROR(118): 'and' requires operands of type bool but rhs is of type char.
ERROR(118): '*' requires operands of type int but lhs is of type char.
ERROR(118): '*' requires operands of type int but rhs is of type bool.
ERROR(118): 'or' requires operands of type bool but rhs is of type int.
ERROR(118): '=' requires operands of the same type but lhs is type int and rhs is type bool.
ERROR(120): The operation '*' only works with arrays.
ERROR(121): 'and' requires operands of type bool but lhs is of type int.
ERROR(121): 'and' requires operands of type bool but rhs is of type int.
ERROR(127): Cannot use function 'cat' as a variable.
ERROR(129): Array 'aa' should be indexed by type int but got type char.
ERROR(129): Array index is the unindexed array 'aa'.
ERROR(130): Symbol 'AA' is not declared.
ERROR(132): Symbol 'meerkat' is not declared.
ERROR(134): Symbol 'xyzzy' is not declared.
ERROR(135): Symbol 'meerkat' is not declared.
ERROR(136): Symbol 'xyzzy' is not declared.
ERROR(136): 'and' requires operands of type bool but rhs is of type int.
ERROR(138): Symbol 'flight' is not declared.
ERROR(138): Unary 'not' requires an operand of type bool but was given type int.
ERROR(138): Unary '-' requires an operand of type int but was given type bool.
ERROR(138): Symbol 'uu' is not declared.
ERROR(138): Symbol 'y' is not declared.
ERROR(138): '*' requires operands of type int but lhs is of type char.
ERROR(138): '+' requires operands of type int but lhs is of type char.
ERROR(140): 'x' is a simple variable and cannot be called.
ERROR(142): Expecting type char in parameter 1 of call to 'dog' declared on line 11 but got type int.
ERROR(142): Too many parameters passed for function 'dog' declared on line 11.
ERROR(143): Too few parameters passed for function 'ibex' declared on line 42.
ERROR(145): Expecting type char in parameter 1 of call to 'dog' declared on line 11 but got type bool.
ERROR(147): Not expecting array in parameter 1 of call to 'cat' declared on line 29.
WARNING(148): Variable 'ba' may be uninitialized when used here.
ERROR(148): Expecting type char in parameter 1 of call to 'cat' declared on line 29 but got type bool.
ERROR(148): Not expecting array in parameter 1 of call to 'cat' declared on line 29.
ERROR(150): Expecting array in parameter 1 of call to 'ibex' declared on line 42.
ERROR(151): Expecting type char in parameter 1 of call to 'ibex' declared on line 42 but got type int.
ERROR(152): Cannot use function 'ibex' as a variable.
ERROR(154): Cannot use function 'ibex' as a variable.
ERROR(155): Cannot use function 'ibex' as a variable.
ERROR(157): Array 'aa' should be indexed by type int but got type char.
ERROR(158): Array 'aa' should be indexed by type int but got type char.
ERROR(158): Array index is the unindexed array 'zz'.
ERROR(159): Expecting type char in parameter 1 of call to 'ox' declared on line 48 but got type bool.
ERROR(159): Array 'aa' should be indexed by type int but got type void.
ERROR(160): Array 'aa' should be indexed by type int but got type char.
ERROR(161): Array 'aa' should be indexed by type int but got type bool.
ERROR(162): Cannot use function 'ox' as a variable.
ERROR(163): Cannot use function 'ibex' as a variable.
ERROR(165): Expecting type char in parameter 1 of call to 'ox' declared on line 48 but got type int.
ERROR(165): '=' requires operands of type bool, char, or int but rhs is of type void.
ERROR(166): Expecting type char in parameter 1 of call to 'ox' declared on line 48 but got type int.
ERROR(166): '+' requires operands of type int but lhs is of type char.
ERROR(166): '+' requires operands of type int but rhs is of type void.
ERROR(166): '=' requires operands of the same type but lhs is type char and rhs is type int.
ERROR(167): Expecting type char in parameter 1 of call to 'ox' declared on line 48 but got type int.
ERROR(167): Expecting type char in parameter 1 of call to 'cat' declared on line 29 but got type void.
ERROR(168): Expecting type char in parameter 1 of call to 'cat' declared on line 29 but got type bool.
ERROR(169): Expecting type char in parameter 1 of call to 'cat' declared on line 29 but got type int.
ERROR(171): '=' requires operands of the same type but lhs is type char and rhs is type bool.
ERROR(173): '=' requires operands of the same type but lhs is type char and rhs is type int.
ERROR(173): '=' requires operands of the same type but lhs is type int and rhs is type char.
ERROR(173): '=' requires operands of the same type but lhs is type char and rhs is type int.
ERROR(175): '*' requires operands of type int but lhs is of type char.
ERROR(175): '*' requires operands of type int but rhs is of type char.
ERROR(175): 'and' requires operands of type bool but lhs is of type int.
ERROR(175): 'and' requires operands of type bool but rhs is of type int.
ERROR(177): '+' requires operands of type int but lhs is of type char.
ERROR(177): Expecting type char in parameter 1 of call to 'emu' declared on line 53 but got type int.
ERROR(177): Symbol 'parrot' is not declared.
ERROR(177): 'and' requires operands of type bool but lhs is of type int.
ERROR(177): 'and' requires operands of type bool but rhs is of type char.
ERROR(177): Expecting type char in parameter 3 of call to 'emu' declared on line 53 but got type bool.
ERROR(178): Expecting type char in parameter 1 of call to 'emu' declared on line 53 but got type bool.
ERROR(178): '+' requires operands of type int but lhs is of type char.
ERROR(178): Expecting type char in parameter 1 of call to 'emu' declared on line 53 but got type int.
ERROR(178): Symbol 'parrot' is not declared.
ERROR(178): 'and' requires operands of type bool but lhs is of type int.
ERROR(178): 'and' requires operands of type bool but rhs is of type char.
ERROR(178): Expecting type char in parameter 3 of call to 'emu' declared on line 53 but got type bool.
ERROR(178): 'and' requires operands of type bool but rhs is of type char.
ERROR(178): Expecting type char in parameter 2 of call to 'emu' declared on line 53 but got type bool.
ERROR(178): Expecting type char in parameter 3 of call to 'emu' declared on line 53 but got type bool.
ERROR(178): Too many parameters passed for function 'emu' declared on line 53.
ERROR(178): '*' requires operands of type int but lhs is of type char.
ERROR(182): Cannot return an array.
WARNING(68): The variable 'c' seems not to be used.
WARNING(59): The variable 'yuri' seems not to be used.
WARNING(57): The function 'mane' seems not to be used.
WARNING(40): The variable 'unusedGlobal' seems not to be used.
ERROR(LINKER): Procedure main is not declared.
Func dog returns type char [mem: Global  loc: 0]
!   Child: 0  Param x of type char [mem: Parameter  size: 1  loc: -2]
!   Child: 1  Compound
!   !   Child: 0  Var x of type char [mem: Local  size: 1  loc: 0]
!   !   Sibling: 0  Var b of type int [mem: Local  size: 1  loc: -3]
!   !   Child: 1  Call: cat
!   !   !   Child: 0  Const: 10
!   !   Sibling: 0  Return
!   !   !   Child: 0  Id: b [mem: Local  size: 1  loc: -3]
Sibling: 0  Func dog returns type int [mem: Global  loc: 0]
!   Child: 0  Param x of type int [mem: Parameter  size: 1  loc: -2]
!   Child: 1  Compound
!   !   Child: 1  Compound
!   !   !   Child: 0  Var x of type int [mem: Local  size: 1  loc: -3]
Sibling: 1  Func cat returns type char [mem: Global  loc: 0]
!   Child: 0  Param x of type char [mem: Parameter  size: 1  loc: -2]
!   Child: 1  Compound
!   !   Child: 0  Var b of type int [mem: Local  size: 1  loc: -3]
!   !   !   Child: 0  Const: 'a'
!   !   Sibling: 0  Var c of type int [mem: Local  size: 1  loc: -4]
!   !   !   Child: 0  Op: +
!   !   !   !   Child: 0  Const: 3
!   !   !   !   Child: 1  Op: *
!   !   !   !   !   Child: 0  Const: 4
!   !   !   !   !   Child: 1  Const: 9
!   !   Sibling: 1  Var d of type int [mem: Local  size: 1  loc: -5]
!   !   !   Child: 0  Id: b [mem: Local  size: 1  loc: -3]
!   !   Sibling: 2  Var e of type int [mem: Local  size: 1  loc: -6]
!   !   !   Child: 0  Op: ?
!   !   !   !   Child: 0  Const: 3
!   !   Child: 1  Return
Sibling: 2  Var cat of type char [mem: Local  size: 1  loc: 0]
Sibling: 3  Var unusedGlobal of type char [mem: Global  size: 1  loc: 0]
Sibling: 4  Func ibex returns type int [mem: Global  loc: 0]
!   Child: 0  Param x is array of type char [mem: Parameter  size: 1  loc: -2]
!   Child: 1  Compound
!   !   Child: 0  Var unusedLocal of type char [mem: Local  size: 1  loc: -3]
!   !   Child: 1  Return
!   !   !   Child: 0  Const: true
Sibling: 5  Func ox returns type void [mem: Global  loc: 0]
!   Child: 0  Param y of type char [mem: Parameter  size: 1  loc: -2]
!   Child: 1  Compound
!   !   Child: 1  Return
!   !   !   Child: 0  Const: 666
Sibling: 6  Func emu returns type char [mem: Global  loc: 0]
!   Child: 0  Param x of type char [mem: Parameter  size: 1  loc: -2]
!   Sibling: 0  Param y of type char [mem: Parameter  size: 1  loc: -3]
!   Sibling: 1  Param z of type char [mem: Parameter  size: 1  loc: -4]
!   Child: 1  Compound
Sibling: 7  Func mane returns type char [mem: Global  loc: 0]
!   Child: 1  Compound
!   !   Child: 0  Var x of type char [mem: Local  size: 1  loc: -2]
!   !   Sibling: 0  Var yuri of type char [mem: Local  size: 1  loc: -3]
!   !   Sibling: 1  Var x of type char [mem: Local  size: 1  loc: 0]
!   !   Sibling: 2  Var x of type int [mem: Local  size: 1  loc: 0]
!   !   Sibling: 3  Var ba is array of type bool [mem: Local  size: 9  loc: -5]
!   !   Sibling: 4  Var aa is array of type char [mem: Local  size: 7  loc: -14]
!   !   Sibling: 5  Var zz is array of type char [mem: Local  size: 7  loc: -21]
!   !   Sibling: 6  Var bb is array of type int [mem: Local  size: 7  loc: -28]
!   !   Sibling: 7  Var cc is array of type int [mem: Local  size: 7  loc: -35]
!   !   Sibling: 8  Var b of type int [mem: Local  size: 1  loc: -41]
!   !   Sibling: 9  Var c of type int [mem: Local  size: 1  loc: -42]
!   !   Child: 1  Id: v [mem: None  size: 1  loc: 0]
!   !   Sibling: 0  If
!   !   !   Child: 0  Id: x [mem: Local  size: 1  loc: -2]
!   !   !   Child: 1  Id: x [mem: Local  size: 1  loc: -2]
!   !   !   Child: 2  Elsif
!   !   !   !   Child: 0  Id: x [mem: Local  size: 1  loc: -2]
!   !   !   !   Child: 1  Id: x [mem: Local  size: 1  loc: -2]
!   !   Sibling: 1  While
!   !   !   Child: 0  Id: x [mem: Local  size: 1  loc: -2]
!   !   !   Child: 1  Id: x [mem: Local  size: 1  loc: -2]
!   !   Sibling: 2  While
!   !   !   Child: 0  Call: ox
!   !   !   !   Child: 0  Const: 10
!   !   !   Child: 1  Id: x [mem: Local  size: 1  loc: -2]
!   !   Sibling: 3  LoopForever
!   !   !   Child: 1  Break
!   !   Sibling: 4  Loop
!   !   !   Child: 0  Var i of type int [mem: Local  size: 1  loc: -43]
!   !   !   Child: 1  Range
!   !   !   !   Child: 0  Const: 1
!   !   !   !   Child: 1  Const: true
!   !   !   !   Child: 2  Const: 1
!   !   !   Child: 2  Break
!   !   Sibling: 5  Loop
!   !   !   Child: 0  Var i of type int [mem: Local  size: 1  loc: -43]
!   !   !   Child: 1  Range
!   !   !   !   Child: 0  Const: '1'
!   !   !   !   Child: 1  Const: 10
!   !   !   !   Child: 2  Const: 1
!   !   !   Child: 2  Break
!   !   Sibling: 6  Loop
!   !   !   Child: 0  Var i of type int [mem: Local  size: 1  loc: -43]
!   !   !   Child: 1  Range
!   !   !   !   Child: 0  Const: 1
!   !   !   !   Child: 1  Const: 10
!   !   !   !   Child: 2  Const: 'c'
!   !   !   Child: 2  Break
!   !   Sibling: 7  Assign: =
!   !   !   Child: 0  Id: x [mem: Local  size: 1  loc: -2]
!   !   !   Child: 1  Id: cat [mem: Global  size: -7  loc: 0]
!   !   Sibling: 8  Assign: =
!   !   !   Child: 0  Id: x [mem: Local  size: 1  loc: -2]
!   !   !   Child: 1  Id: b [mem: Local  size: 1  loc: -41]
!   !   Sibling: 9  Assign: +=
!   !   !   Child: 0  Id: x [mem: Local  size: 1  loc: -2]
!   !   !   Child: 1  Id: b [mem: Local  size: 1  loc: -41]
!   !   Sibling: 10  Assign: -=
!   !   !   Child: 0  Id: b [mem: Local  size: 1  loc: -41]
!   !   !   Child: 1  Id: x [mem: Local  size: 1  loc: -2]
!   !   Sibling: 11  Op: >
!   !   !   Child: 0  Id: b [mem: Local  size: 1  loc: -41]
!   !   !   Child: 1  Id: x [mem: Local  size: 1  loc: -2]
!   !   Sibling: 12  Assign: ++
!   !   !   Child: 0  Id: b [mem: Local  size: 1  loc: -41]
!   !   Sibling: 13  If
!   !   !   Child: 0  Id: bb [mem: Local  size: 7  loc: -28]
!   !   !   Child: 1  Id: x [mem: Local  size: 1  loc: -2]
!   !   !   Child: 2  Elsif
!   !   !   !   Child: 0  Id: bb [mem: Local  size: 7  loc: -28]
!   !   !   !   Child: 1  Id: x [mem: Local  size: 1  loc: -2]
!   !   Sibling: 14  While
!   !   !   Child: 0  Id: bb [mem: Local  size: 7  loc: -28]
!   !   !   Child: 1  Id: x [mem: Local  size: 1  loc: -2]
!   !   Sibling: 15  Break
!   !   Sibling: 16  While
!   !   !   Child: 0  Id: b [mem: Local  size: 1  loc: -41]
!   !   !   Child: 1  Compound
!   !   !   !   Child: 1  Break
!   !   Sibling: 17  While
!   !   !   Child: 0  Id: b [mem: Local  size: 1  loc: -41]
!   !   !   Child: 1  Compound
!   !   !   !   Child: 1  While
!   !   !   !   !   Child: 0  Id: b [mem: Local  size: 1  loc: -41]
!   !   !   !   !   Child: 1  Const: 666
!   !   !   !   Sibling: 0  Break
!   !   Sibling: 18  Op: +
!   !   !   Child: 0  Id: aa [mem: Local  size: 7  loc: -14]
!   !   !   Child: 1  Const: 6
!   !   Sibling: 19  Op: <
!   !   !   Child: 0  Id: aa [mem: Local  size: 7  loc: -14]
!   !   !   Child: 1  Id: zz [mem: Local  size: 7  loc: -21]
!   !   Sibling: 20  Op: <
!   !   !   Child: 0  Id: bb [mem: Local  size: 7  loc: -28]
!   !   !   Child: 1  Id: cc [mem: Local  size: 7  loc: -35]
!   !   Sibling: 21  Op: ==
!   !   !   Child: 0  Id: x [mem: Local  size: 1  loc: -2]
!   !   !   Child: 1  Const: true
!   !   Sibling: 22  Op: ==
!   !   !   Child: 0  Id: x [mem: Local  size: 1  loc: -2]
!   !   !   Child: 1  Const: 1
!   !   Sibling: 23  Op: ==
!   !   !   Child: 0  Id: b [mem: Local  size: 1  loc: -41]
!   !   !   Child: 1  Const: true
!   !   Sibling: 24  Op: +
!   !   !   Child: 0  Const: false
!   !   !   Child: 1  Id: x [mem: Local  size: 1  loc: -2]
!   !   Sibling: 25  Op: *
!   !   !   Child: 0  Id: x [mem: Local  size: 1  loc: -2]
!   !   !   Child: 1  Const: false
!   !   Sibling: 26  Op: not
!   !   !   Child: 0  Id: x [mem: Local  size: 1  loc: -2]
!   !   Sibling: 27  Op: not
!   !   !   Child: 0  Op: +
!   !   !   !   Child: 0  Id: x [mem: Local  size: 1  loc: -2]
!   !   !   !   Child: 1  Id: b [mem: Local  size: 1  loc: -41]
!   !   Sibling: 28  Op: -
!   !   !   Child: 0  Id: b [mem: Local  size: 1  loc: -41]
!   !   Sibling: 29  Op: [
!   !   !   Child: 0  Id: x [mem: Local  size: 1  loc: -2]
!   !   !   Child: 1  Const: 496
!   !   Sibling: 30  Assign: =
!   !   !   Child: 0  Id: b [mem: Local  size: 1  loc: -41]
!   !   !   Child: 1  Op: ==
!   !   !   !   Child: 0  Id: x [mem: Local  size: 1  loc: -2]
!   !   !   !   Child: 1  Op: +
!   !   !   !   !   Child: 0  Id: x [mem: Local  size: 1  loc: -2]
!   !   !   !   !   Child: 1  Op: *
!   !   !   !   !   !   Child: 0  Id: x [mem: Local  size: 1  loc: -2]
!   !   !   !   !   !   Child: 1  Op: and
!   !   !   !   !   !   !   Child: 0  Id: x [mem: Local  size: 1  loc: -2]
!   !   !   !   !   !   !   Child: 1  Id: x [mem: Local  size: 1  loc: -2]
!   !   Sibling: 31  Assign: =
!   !   !   Child: 0  Id: b [mem: Local  size: 1  loc: -41]
!   !   !   Child: 1  Op: ==
!   !   !   !   Child: 0  Id: x [mem: Local  size: 1  loc: -2]
!   !   !   !   Child: 1  Op: +
!   !   !   !   !   Child: 0  Id: x [mem: Local  size: 1  loc: -2]
!   !   !   !   !   Child: 1  Op: *
!   !   !   !   !   !   Child: 0  Id: x [mem: Local  size: 1  loc: -2]
!   !   !   !   !   !   Child: 1  Op: and
!   !   !   !   !   !   !   Child: 0  Id: x [mem: Local  size: 1  loc: -2]
!   !   !   !   !   !   !   Child: 1  Id: y [mem: None  size: 1  loc: 0]
!   !   Sibling: 32  Assign: =
!   !   !   Child: 0  Id: b [mem: Local  size: 1  loc: -41]
!   !   !   Child: 1  Op: or
!   !   !   !   Child: 0  Op: ==
!   !   !   !   !   Child: 0  Id: x [mem: Local  size: 1  loc: -2]
!   !   !   !   !   Child: 1  Id: x [mem: Local  size: 1  loc: -2]
!   !   !   !   Child: 1  Op: *
!   !   !   !   !   Child: 0  Id: x [mem: Local  size: 1  loc: -2]
!   !   !   !   !   Child: 1  Op: and
!   !   !   !   !   !   Child: 0  Id: x [mem: Local  size: 1  loc: -2]
!   !   !   !   !   !   Child: 1  Id: x [mem: Local  size: 1  loc: -2]
!   !   Sibling: 33  Op: *
!   !   !   Child: 0  Id: x [mem: Local  size: 1  loc: -2]
!   !   Sibling: 34  Op: and
!   !   !   Child: 0  Op: *
!   !   !   !   Child: 0  Id: aa [mem: Local  size: 7  loc: -14]
!   !   !   Child: 1  Id: b [mem: Local  size: 1  loc: -41]
!   !   Sibling: 35  Op: [
!   !   !   Child: 0  Id: aa [mem: Local  size: 7  loc: -14]
!   !   !   Child: 1  Op: *
!   !   !   !   Child: 0  Id: aa [mem: Local  size: 7  loc: -14]
!   !   Sibling: 36  Op: [
!   !   !   Child: 0  Id: aa [mem: Local  size: 7  loc: -14]
!   !   !   Child: 1  Const: 666
!   !   Sibling: 37  Op: [
!   !   !   Child: 0  Id: aa [mem: Local  size: 7  loc: -14]
!   !   !   Child: 1  Id: b [mem: Local  size: 1  loc: -41]
!   !   Sibling: 38  Op: [
!   !   !   Child: 0  Id: aa [mem: Local  size: 7  loc: -14]
!   !   !   Child: 1  Id: cat [mem: Global  size: -7  loc: 0]
!   !   Sibling: 39  Op: [
!   !   !   Child: 0  Id: aa [mem: Local  size: 7  loc: -14]
!   !   !   Child: 1  Id: aa [mem: Local  size: 7  loc: -14]
!   !   Sibling: 40  Op: [
!   !   !   Child: 0  Id: AA [mem: None  size: 1  loc: 0]
!   !   !   Child: 1  Const: 1
!   !   Sibling: 41  Op: [
!   !   !   Child: 0  Id: aa [mem: Local  size: 7  loc: -14]
!   !   !   Child: 1  Id: meerkat [mem: None  size: 1  loc: 0]
!   !   Sibling: 42  Id: xyzzy [mem: None  size: 1  loc: 0]
!   !   Sibling: 43  Call: meerkat
!   !   Sibling: 44  Op: and
!   !   !   Child: 0  Const: true
!   !   !   Child: 1  Op: /
!   !   !   !   Child: 0  Id: xyzzy [mem: None  size: 1  loc: 0]
!   !   !   !   Child: 1  Const: 666
!   !   Sibling: 45  Call: flight
!   !   !   Child: 0  Op: not
!   !   !   !   Child: 0  Const: 5
!   !   !   Sibling: 0  Op: -
!   !   !   !   Child: 0  Const: true
!   !   !   Sibling: 1  Id: uu [mem: None  size: 1  loc: 0]
!   !   !   Sibling: 2  Id: y [mem: None  size: 1  loc: 0]
!   !   !   Sibling: 3  Op: +
!   !   !   !   Child: 0  Id: x [mem: Local  size: 1  loc: -2]
!   !   !   !   Child: 1  Op: *
!   !   !   !   !   Child: 0  Id: x [mem: Local  size: 1  loc: -2]
!   !   !   !   !   Child: 1  Id: b [mem: Local  size: 1  loc: -41]
!   !   Sibling: 46  Call: x
!   !   Sibling: 47  Call: dog
!   !   !   Child: 0  Const: 3
!   !   !   Sibling: 0  Const: 5
!   !   Sibling: 48  Call: ibex
!   !   Sibling: 49  Call: dog
!   !   !   Child: 0  Const: true
!   !   Sibling: 50  Call: cat
!   !   !   Child: 0  Id: aa [mem: Local  size: 7  loc: -14]
!   !   Sibling: 51  Call: cat
!   !   !   Child: 0  Id: ba [mem: Local  size: 9  loc: -5]
!   !   Sibling: 52  Call: ibex
!   !   !   Child: 0  Id: x [mem: Local  size: 1  loc: -2]
!   !   Sibling: 53  Call: ibex
!   !   !   Child: 0  Id: bb [mem: Local  size: 7  loc: -28]
!   !   Sibling: 54  Op: [
!   !   !   Child: 0  Id: ibex [mem: Global  size: -4  loc: 0]
!   !   !   Child: 1  Const: 3
!   !   Sibling: 55  Op: +
!   !   !   Child: 0  Id: ibex [mem: Global  size: -4  loc: 0]
!   !   !   Child: 1  Const: 4
!   !   Sibling: 56  Id: ibex [mem: Global  size: -4  loc: 0]
!   !   Sibling: 57  Op: [
!   !   !   Child: 0  Id: aa [mem: Local  size: 7  loc: -14]
!   !   !   Child: 1  Op: [
!   !   !   !   Child: 0  Id: zz [mem: Local  size: 7  loc: -21]
!   !   !   !   Child: 1  Const: 1
!   !   Sibling: 58  Op: [
!   !   !   Child: 0  Id: aa [mem: Local  size: 7  loc: -14]
!   !   !   Child: 1  Id: zz [mem: Local  size: 7  loc: -21]
!   !   Sibling: 59  Op: [
!   !   !   Child: 0  Id: aa [mem: Local  size: 7  loc: -14]
!   !   !   Child: 1  Call: ox
!   !   !   !   Child: 0  Const: true
!   !   Sibling: 60  Op: [
!   !   !   Child: 0  Id: aa [mem: Local  size: 7  loc: -14]
!   !   !   Child: 1  Const: 'x'
!   !   Sibling: 61  Op: [
!   !   !   Child: 0  Id: aa [mem: Local  size: 7  loc: -14]
!   !   !   Child: 1  Const: false
!   !   Sibling: 62  Op: [
!   !   !   Child: 0  Id: aa [mem: Local  size: 7  loc: -14]
!   !   !   Child: 1  Id: ox [mem: Global  size: -3  loc: 0]
!   !   Sibling: 63  Op: [
!   !   !   Child: 0  Id: aa [mem: Local  size: 7  loc: -14]
!   !   !   Child: 1  Id: ibex [mem: Global  size: -4  loc: 0]
!   !   Sibling: 64  Assign: =
!   !   !   Child: 0  Id: x [mem: Local  size: 1  loc: -2]
!   !   !   Child: 1  Call: ox
!   !   !   !   Child: 0  Const: 28
!   !   Sibling: 65  Assign: =
!   !   !   Child: 0  Id: x [mem: Local  size: 1  loc: -2]
!   !   !   Child: 1  Op: +
!   !   !   !   Child: 0  Id: x [mem: Local  size: 1  loc: -2]
!   !   !   !   Child: 1  Call: ox
!   !   !   !   !   Child: 0  Const: 6
!   !   Sibling: 66  Call: cat
!   !   !   Child: 0  Call: ox
!   !   !   !   Child: 0  Const: 492
!   !   Sibling: 67  Call: cat
!   !   !   Child: 0  Const: true
!   !   Sibling: 68  Call: cat
!   !   !   Child: 0  Call: cat
!   !   !   !   Child: 0  Const: 492
!   !   Sibling: 69  Assign: =
!   !   !   Child: 0  Id: x [mem: Local  size: 1  loc: -2]
!   !   !   Child: 1  Assign: =
!   !   !   !   Child: 0  Id: x [mem: Local  size: 1  loc: -2]
!   !   !   !   Child: 1  Const: true
!   !   Sibling: 70  Assign: =
!   !   !   Child: 0  Id: b [mem: Local  size: 1  loc: -41]
!   !   !   Child: 1  Assign: =
!   !   !   !   Child: 0  Id: b [mem: Local  size: 1  loc: -41]
!   !   !   !   Child: 1  Const: 666
!   !   Sibling: 71  Assign: =
!   !   !   Child: 0  Id: x [mem: Local  size: 1  loc: -2]
!   !   !   Child: 1  Assign: =
!   !   !   !   Child: 0  Id: b [mem: Local  size: 1  loc: -41]
!   !   !   !   Child: 1  Assign: =
!   !   !   !   !   Child: 0  Id: x [mem: Local  size: 1  loc: -2]
!   !   !   !   !   Child: 1  Id: b [mem: Local  size: 1  loc: -41]
!   !   Sibling: 72  Op: and
!   !   !   Child: 0  Op: *
!   !   !   !   Child: 0  Id: x [mem: Local  size: 1  loc: -2]
!   !   !   !   Child: 1  Id: b [mem: Local  size: 1  loc: -41]
!   !   !   Child: 1  Op: *
!   !   !   !   Child: 0  Id: b [mem: Local  size: 1  loc: -41]
!   !   !   !   Child: 1  Id: x [mem: Local  size: 1  loc: -2]
!   !   Sibling: 73  Call: emu
!   !   !   Child: 0  Op: +
!   !   !   !   Child: 0  Id: x [mem: Local  size: 1  loc: -2]
!   !   !   !   Child: 1  Id: b [mem: Local  size: 1  loc: -41]
!   !   !   Sibling: 0  Id: parrot [mem: None  size: 1  loc: 0]
!   !   !   Sibling: 1  Op: and
!   !   !   !   Child: 0  Id: b [mem: Local  size: 1  loc: -41]
!   !   !   !   Child: 1  Id: x [mem: Local  size: 1  loc: -2]
!   !   Sibling: 74  Call: emu
!   !   !   Child: 0  Const: false
!   !   !   Sibling: 0  Op: and
!   !   !   !   Child: 0  Const: true
!   !   !   !   Child: 1  Call: emu
!   !   !   !   !   Child: 0  Op: +
!   !   !   !   !   !   Child: 0  Id: x [mem: Local  size: 1  loc: -2]
!   !   !   !   !   !   Child: 1  Id: b [mem: Local  size: 1  loc: -41]
!   !   !   !   !   Sibling: 0  Id: parrot [mem: None  size: 1  loc: 0]
!   !   !   !   !   Sibling: 1  Op: and
!   !   !   !   !   !   Child: 0  Id: b [mem: Local  size: 1  loc: -41]
!   !   !   !   !   !   Child: 1  Id: x [mem: Local  size: 1  loc: -2]
!   !   !   Sibling: 1  Const: true
!   !   !   Sibling: 2  Op: *
!   !   !   !   Child: 0  Id: x [mem: Local  size: 1  loc: -2]
!   !   !   !   Child: 1  Id: b [mem: Local  size: 1  loc: -41]
!   !   Sibling: 75  Id: bb [mem: Local  size: 7  loc: -28]
!   !   Sibling: 76  Return
!   !   !   Child: 0  Id: aa [mem: Local  size: 7  loc: -14]
Offset for end of global space: -1
Number of warnings: 30
Number of errors: 150
