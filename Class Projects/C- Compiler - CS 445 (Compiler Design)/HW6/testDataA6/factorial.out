Func factorial returns type int [mem: Global  loc: 0]
!   Child: 0  Param n of type int [mem: Parameter  size: 1  loc: -2]
!   Child: 1  Compound
!   !   Child: 0  Var i of type int [mem: Local  size: 1  loc: -3]
!   !   Sibling: 0  Var f of type int [mem: Local  size: 1  loc: -4]
!   !   Child: 1  Assign: =
!   !   !   Child: 0  Id: f [mem: Local  size: 1  loc: -4]
!   !   !   Child: 1  Assign: =
!   !   !   !   Child: 0  Id: i [mem: Local  size: 1  loc: -3]
!   !   !   !   Child: 1  Const: 1
!   !   Sibling: 0  While
!   !   !   Child: 0  Op: <=
!   !   !   !   Child: 0  Id: i [mem: Local  size: 1  loc: -3]
!   !   !   !   Child: 1  Id: n [mem: Parameter  size: 1  loc: -2]
!   !   !   Child: 1  Compound
!   !   !   !   Child: 1  Call: output
!   !   !   !   !   Child: 0  Id: i [mem: Local  size: 1  loc: -3]
!   !   !   !   Sibling: 0  Assign: =
!   !   !   !   !   Child: 0  Id: f [mem: Local  size: 1  loc: -4]
!   !   !   !   !   Child: 1  Op: *
!   !   !   !   !   !   Child: 0  Id: f [mem: Local  size: 1  loc: -4]
!   !   !   !   !   !   Child: 1  Id: i [mem: Local  size: 1  loc: -3]
!   !   !   !   Sibling: 1  Assign: ++
!   !   !   !   !   Child: 0  Id: i [mem: Local  size: 1  loc: -3]
!   !   Sibling: 1  Return
!   !   !   Child: 0  Id: f [mem: Local  size: 1  loc: -4]
Sibling: 0  Func main returns type void [mem: Global  loc: 0]
!   Child: 1  Compound
!   !   Child: 0  Var n of type int [mem: Local  size: 1  loc: -2]
!   !   Child: 1  Assign: =
!   !   !   Child: 0  Id: n [mem: Local  size: 1  loc: -2]
!   !   !   Child: 1  Call: input
!   !   Sibling: 0  Assign: =
!   !   !   Child: 0  Id: n [mem: Local  size: 1  loc: -2]
!   !   !   Child: 1  Call: factorial
!   !   !   !   Child: 0  Id: n [mem: Local  size: 1  loc: -2]
!   !   Sibling: 1  Call: output
!   !   !   Child: 0  Id: n [mem: Local  size: 1  loc: -2]
!   !   Sibling: 2  Call: outnl
Offset for end of global space: 0
Number of warnings: 0
Number of errors: 0
