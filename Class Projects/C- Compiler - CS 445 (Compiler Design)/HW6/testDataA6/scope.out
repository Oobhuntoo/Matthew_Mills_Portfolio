ERROR(7): Symbol 'bat' is not declared.
WARNING(8): Variable 'a' may be uninitialized when used here.
ERROR(8): 'or' requires operands of type bool but lhs is of type int.
ERROR(8): 'or' requires operands of type bool but rhs is of type int.
ERROR(14): Symbol 'b' is not declared.
WARNING(15): Variable 'c' may be uninitialized when used here.
ERROR(24): Symbol 'b' is not declared.
ERROR(25): Symbol 'c' is not declared.
ERROR(29): Symbol 'b' is not declared.
ERROR(30): Symbol 'c' is not declared.
WARNING(3): Expecting to return type int but function 'ant' has no return statement.
ERROR(40): Symbol 'x' is not declared.
WARNING(43): Variable 'z' may be uninitialized when used here.
ERROR(44): Symbol 'p' is not declared.
ERROR(45): Symbol 'q' is not declared.
ERROR(45): Symbol 'r' is not declared.
ERROR(46): Symbol 's' is not declared.
ERROR(46): Too many parameters passed for function 'ant' declared on line 3.
ERROR(46): Symbol 't' is not declared.
ERROR(47): Symbol 'u' is not declared.
ERROR(47): Symbol 'cow' is not declared.
ERROR(47): Symbol 'v' is not declared.
ERROR(48): Symbol 'abraxsis' is not declared.
ERROR(49): Symbol 'a' is not declared.
WARNING(36): Expecting to return type int but function 'bat' has no return statement.
WARNING(39): The variable 'bat' seems not to be used.
ERROR(54): Symbol 'g' is already declared at line 2.
ERROR(56): Symbol 'g' is already declared at line 2.
ERROR(58): Symbol 'x' is not declared.
ERROR(61): Symbol 'g' is already declared at line 2.
ERROR(62): Symbol 'ant' is already declared at line 3.
WARNING(36): The function 'bat' seems not to be used.
ERROR(LINKER): Procedure main is not declared.
Var g of type int [mem: Global  size: 1  loc: 0]
Sibling: 0  Func ant returns type int [mem: Global  loc: 0]
!   Child: 0  Param x of type int [mem: Parameter  size: 1  loc: -2]
!   Child: 1  Compound
!   !   Child: 0  Var a of type int [mem: Local  size: 1  loc: -3]
!   !   Child: 1  Call: bat
!   !   !   Child: 0  Const: 3
!   !   Sibling: 0  Op: or
!   !   !   Child: 0  Id: a [mem: Local  size: 1  loc: -3]
!   !   !   Child: 1  Id: a [mem: Local  size: 1  loc: -3]
!   !   Sibling: 1  Id: x [mem: Parameter  size: 1  loc: -2]
!   !   Sibling: 2  Id: g [mem: Global  size: 1  loc: 0]
!   !   Sibling: 3  Compound
!   !   !   Child: 0  Var c of type int [mem: Local  size: 1  loc: -4]
!   !   !   Child: 1  Id: a [mem: Local  size: 1  loc: -3]
!   !   !   Sibling: 0  Id: b [mem: None  size: 1  loc: 0]
!   !   !   Sibling: 1  Id: c [mem: Local  size: 1  loc: -4]
!   !   !   Sibling: 2  Id: g [mem: Global  size: 1  loc: 0]
!   !   !   Sibling: 3  Id: x [mem: Parameter  size: 1  loc: -2]
!   !   !   Sibling: 4  Compound
!   !   !   !   Child: 1  Id: c [mem: Local  size: 1  loc: -4]
!   !   !   !   Sibling: 0  Id: a [mem: Local  size: 1  loc: -3]
!   !   Sibling: 4  Id: a [mem: Local  size: 1  loc: -3]
!   !   Sibling: 5  Id: b [mem: None  size: 1  loc: 0]
!   !   Sibling: 6  Id: c [mem: None  size: 1  loc: 0]
!   !   Sibling: 7  Id: x [mem: Parameter  size: 1  loc: -2]
!   !   Sibling: 8  Compound
!   !   !   Child: 1  Id: a [mem: Local  size: 1  loc: -3]
!   !   !   Sibling: 0  Id: b [mem: None  size: 1  loc: 0]
!   !   !   Sibling: 1  Id: c [mem: None  size: 1  loc: 0]
!   !   !   Sibling: 2  Id: x [mem: Parameter  size: 1  loc: -2]
!   !   Sibling: 9  Id: x [mem: Parameter  size: 1  loc: -2]
Sibling: 1  Func bat returns type int [mem: Global  loc: 0]
!   Child: 0  Param y of type int [mem: Parameter  size: 1  loc: -2]
!   Child: 1  Compound
!   !   Child: 0  Var z of type int [mem: Local  size: 1  loc: -3]
!   !   Sibling: 0  Var bat of type int [mem: Local  size: 1  loc: -4]
!   !   Child: 1  Id: x [mem: None  size: 1  loc: 0]
!   !   Sibling: 0  Call: ant
!   !   !   Child: 0  Id: y [mem: Parameter  size: 1  loc: -2]
!   !   Sibling: 1  Call: ant
!   !   !   Child: 0  Id: g [mem: Global  size: 1  loc: 0]
!   !   Sibling: 2  Call: ant
!   !   !   Child: 0  Id: z [mem: Local  size: 1  loc: -3]
!   !   Sibling: 3  Id: p [mem: None  size: 1  loc: 0]
!   !   Sibling: 4  Op: +
!   !   !   Child: 0  Id: q [mem: None  size: 1  loc: 0]
!   !   !   Child: 1  Id: r [mem: None  size: 1  loc: 0]
!   !   Sibling: 5  Call: ant
!   !   !   Child: 0  Id: s [mem: None  size: 1  loc: 0]
!   !   !   Sibling: 0  Id: t [mem: None  size: 1  loc: 0]
!   !   Sibling: 6  Assign: =
!   !   !   Child: 0  Id: u [mem: None  size: 1  loc: 0]
!   !   !   Child: 1  Call: cow
!   !   !   !   Child: 0  Id: v [mem: None  size: 1  loc: 0]
!   !   Sibling: 7  Id: abraxsis [mem: None  size: 1  loc: 0]
!   !   Sibling: 8  Id: a [mem: None  size: 1  loc: 0]
!   !   Sibling: 9  Id: z [mem: Local  size: 1  loc: -3]
!   !   Sibling: 10  Id: g [mem: Global  size: 1  loc: 0]
Sibling: 2  Var g of type int [mem: Local  size: 1  loc: 0]
Sibling: 3  Func g returns type int [mem: Global  loc: 0]
!   Child: 1  Compound
!   !   Child: 1  Return
!   !   !   Child: 0  Id: x [mem: None  size: 1  loc: 0]
Sibling: 4  Func g returns type void [mem: Global  loc: 0]
Sibling: 5  Func ant returns type void [mem: Global  loc: 0]
Offset for end of global space: -1
Number of warnings: 7
Number of errors: 26
